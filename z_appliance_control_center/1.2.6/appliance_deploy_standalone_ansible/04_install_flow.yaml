#*+-------------------------------------------------------------------+
#*| IBM Confidential                                                  |
#*|                                                                   |
#*| Licensed Materials - Property of IBM                              |
#*|                                                                   |
#*|                                                                   |
#*| © Copyright IBM Corp. 2025 All Rights Reserved                    |
#*|                                                                   |
#*| The source code for this program is not published or otherwise    |
#*| divested of its trade secrets, irrespective of what has been      |
#*| deposited with the U.S. Copyright Office.                         |
#*+-------------------------------------------------------------------+



- name: ACC Standalone playbook, run by ACC-owner, for ACC-owner actions
  hosts: localhost
  gather_facts : true
  vars_files:
    - owner_vars.yaml

  tasks:
    - name: 17 - Get authentication token from the ACC as appliance-owner
      tags: owner, install
      uri:
        url: "{{ acc_ip }}/user/token"
        method: POST
        body:
          username: "{{ cc_owner_user }}"
          password: "{{ cc_owner_password }}"
        body_format: json
        return_content: true
        validate_certs: false
      register: auth_response

    - name: Extract the token
      tags: owner, install
      set_fact:
        access_token: "{{ auth_response.json.access_token }}"
        
    - name: Printing the image ID
      tags: owner, install
      debug:
        msg: "{{ image_id }}"

    - name: 18 - Get list of running appliance
      uri:
        url: "{{ acc_ip }}/resource/quotas"
        method: GET
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ access_token }}"
        validate_certs: false
      register: quotas_response

    - name: Print quotas response
      debug:
        var: quotas_response.json

    - name: Extract app IDs from quotas
      set_fact:
        app_ids: >-
          {{
            quotas_response.json
            | selectattr('id', 'defined')
            | map(attribute='id')
            | list
          }}
    - name: Print extracted app IDs
      debug:
        msg: "App IDs to unlock: {{ app_ids | join(', ') }}"

    - name: 19 - Unlock quota using App id (comment this if already done)
      tags: owner
      loop: "{{ app_ids }}"
      loop_control:
        loop_var: app_id
      uri:
        url: "{{ acc_ip }}/unlock_quota"
        method: POST
        body:
          {
            "ssc_username": "{{ app_username }}", 
            "ssc_password": "{{ app_password }}",
            "app_id": "{{ app_id }}"
          }
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        status_code: 200
        validate_certs: false
      register: unlock_responses
      
    - name: 18 - As owner, install and activate the image
      tags: owner
      uri:
        url: "{{ acc_ip }}/cluster/activate"
        method: POST
        body: |
          {
            "{{ package_name }}":
            {
              "image_id": {{ image_id }},
              "processor_usage": "{{ processor_usage }}",
              "processor_type": "{{ processor_type }}",
              "memory": {{ app_memory }},
              "cores": {{ app_cores }},
              "username": "{{ app_username }}",
              "password": "{{ app_password }}",
              "hostname": "{{ hostname }}",
              "lpars": [        # Comment any one lpar details when running with 1 lpar
                  {
                    "name": "{{ lpar_name1 }}",
                    "execution_action": "{{ execution_action }}",
                    "install": "{{ install }}"
                  },
                  {
                    "name": "{{ lpar_name2 }}",
                    "execution_action": "{{ execution_action }}",
                    "install": "{{ install }}"
                  }
                ]
              }
            }
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        status_code: 200
        validate_certs: false
      register: activate_response

    - name: Printing the response
      tags: owner, install
      debug:
        var: activate_response.json

    - name: Wait for 15 seconds
      ansible.builtin.pause:
        seconds: 15
    
    # Extract all task IDs from response
    - name: Extract task IDs dynamically
      set_fact:
        task_ids: >-
          {{
            activate_response.json
            | dict2items
            | map(attribute='value')
            | map('dict2items')
            | flatten
            | map(attribute='value')
            | selectattr('task_id', 'defined')
            | map(attribute='task_id')
            | list
          }}

    - name: Print extracted task IDs
      debug:
       msg: >-
        {% if task_ids | length > 0 %}
          Task IDs for active LPARs: {{ task_ids | join(', ') }}
        {% else %}
          No task IDs found — activation failed.
        {% endif %}

    - name: Get status of each install task
      loop: "{{ task_ids }}"
      loop_control:
        loop_var: task_id
      tags: owner, install
      uri:
        url: "{{ acc_ip }}/tasks/{{ task_id }}/status"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: false
      register: task_status

    - name: Print task status responses
      debug:
        msg: "{{ item.json }}"
      loop: "{{ task_status.results | default([task_status]) }}"
      loop_control:
        label: "Task ID {{ item.task_id | default('unknown') }}"
      when: item.json is defined
   

    - name: 20a - Get resources assigned to the owner by the admin
      tags: owner
      uri:
        url: "{{ acc_ip }}/resource/pkgs"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        validate_certs: false
      register: response

    - name: Printing the assigned resources
      tags: owner
      debug:
        msg: "{{ response.json }}"

    - name: 20b - Get resources consumed by the owner
      tags: owner
      uri:
        url: "{{ acc_ip }}/resource/quotas"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        validate_certs: false
      register: response

    - name: Printing the consumed resources
      tags: owner
      debug:
        msg: "{{ response.json }}"