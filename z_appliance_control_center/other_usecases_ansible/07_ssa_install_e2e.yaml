#*+-------------------------------------------------------------------+
#*| IBM Confidential                                                  |
#*|                                                                   |
#*| Licensed Materials - Property of IBM                              |
#*|                                                                   |
#*|                                                                   |
#*| Â© Copyright IBM Corp. 2025 All Rights Reserved                    |
#*|                                                                   |
#*| The source code for this program is not published or otherwise    |
#*| divested of its trade secrets, irrespective of what has been      |
#*| deposited with the U.S. Copyright Office.                         |
#*+-------------------------------------------------------------------+

# Todo
# Check if we can add a certificate and then remove verify_cert

- name: ACC playbook, run by appliance-owner for installing 2x SSA appliances
  hosts: localhost
  gather_facts : true
  vars_files:
    - env_vars.yaml

  vars_prompt:
    - name: cc_admin_user
      prompt: "Enter ACC LPAR's username"
      private: no

    - name: cc_admin_old_password
      prompt: "Enter ACC LPAR's Default Password"
      private: yes

    - name: cc_admin_password
      prompt: "Enter ACC LPAR's New Password"
      private: yes

    - name: run_init
      prompt: "Do you want to initialize ACC with HMC Default Mode? (yes/no)"
      private: no
      default: "yes"

  tasks:
    - name: Prepare ACC URL
      set_fact:
        cc_url: "https://{{ acc_ip }}:{{ acc_port }}/api"
    
    - name: Printing the acc url 
      debug:
        msg: "{{ cc_url }}"

    - name: Prepare execution_action
      set_fact:
        execution_action: "{{ 'default' if default_mode else 'appliance_only' }}"

    - name: Printing execution_action
      debug:
        msg: "{{ execution_action }}"


    - name: Initialize ACC
      tags: admin
      uri:
        url: "{{ cc_url }}/init"
        body:
          mfa_enabled: "{{ mfa_enabled }}"
          hmc_managed: "{{ default_mode }}"
          credentials:
            username: "{{ cc_admin_user }}"
            password: "{{ cc_admin_old_password}}"
        body_format: json
        method: POST
        validate_certs: false
        return_content: true
      when: run_init | lower == "yes"

    - name: Update ACC-admin password (remove this if already done)
      tags: admin
      uri:
        url: "{{ cc_url }}/user"
        body:
          username: "{{ cc_admin_user }}"
          old_password: "{{ cc_admin_old_password}}"
          new_password: "{{ cc_admin_password }}"
        body_format: json
        method: PUT
        validate_certs: false
        return_content: true

    - name: 01 - Get authentication token from the ACC as admin
      tags: admin
      uri:
        url: "{{ cc_url }}/user/token"
        body:
          username: "{{ cc_admin_user }}"
          password: "{{ cc_admin_password }}"
        body_format: json
        method: POST
        return_content: true
        validate_certs: false
      register: auth_response

    - name: Extract the admin token
      tags: admin
      set_fact:
        access_token: "{{ auth_response.json.access_token }}"

    - name: 04 - Set HMC configuration in the ACC (default mode)
      tags: admin
      uri:
        url: "{{ cc_url }}/config/hmcconfig"
        timeout: 300
        method: POST
        body:
          host: "{{ hmc_url }}"
          userid: "{{ hmc_user }}"
          password: "{{ hmc_password }}"
          verify_cert: false
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        validate_certs: false
        status_code: 204
      register: response
      when: default_mode

    - name: Insert CPC information in ACC with dummy values (standalone mode)
      tags: admin
      uri:
        url: "{{ cc_url }}/cpcs"
        timeout: 200
        method: POST
        body:
          cpcs:
            - cpc_name: "{{ z_machine_name }}"
              ifls : 32              # update number of ifls as per infra support to create cpc
              gps: 32                # update number of gps as per infra support to create cpc
              available_storage: 229376    # update number of memory(in MB) as per infra support to create cpc
              dpm_enabled: "{{ z_machine_dpm_enabled }}"
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        status_code: 200
        verify_cert: false
      when: not default_mode

    - name: 07 - Create an appliance-owner for both SSAs
      tags: admin
      uri:
        url: "{{ cc_url }}/user"
        method: POST
        body:
          username: "{{ ssa_owner_user }}"
          password: "{{ ssa_owner_default_password }}"
          email: "{{ ssa_owner_email }}"
          role: "owner"
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        status_code: 204
        validate_certs: false
      register: response

    - name: Assign resources to the SSA owner
      tags: admin
      uri:
        url: "{{ cc_url }}/resource/pkgs"
        timeout: 300
        method: POST
        body:
          owner: "{{ ssa_owner_user }}"
          name: "ssa_package"
          ifls: 0
          gps: 6
          memory: 102400
          lpars:
            - name: "{{ ssa_lpar1 }}"
              interfaces:
                - name: "{{ interface_name1 }}"
                  fid: "{{ fid1 }}"
                  # chpid: "{{ chpid1 }}"
                  # port: "{{ zport1 }}"
                  # vlan_id: "{{ vlan_id1 }}" # If your infra doesn't support this, comment it out
                  prefix: "{{ prefix1 }}"
                  ip: "{{ ssa_ip1 }}"
                  gw: "{{ gw_ip1 }}"
              boot-info:
                disk-id: "{{ disk_id1 }}"
                is-fcp: "{{ is_fcp1 }}"
            - name: "{{ ssa_lpar2 }}"
              interfaces:
                - name: "{{ interface_name2 }}"
                  fid: "{{ fid2 }}"
                  # chpid: "{{ chpid2 }}"
                  # port: "{{ zport2 }}"
                  # vlan_id: "{{ vlan_id2 }}" # If your infra doesn't support this, comment it out
                  prefix: "{{ prefix2 }}"
                  ip: "{{ ssa_ip2 }}"
                  gw: "{{ gw_ip2 }}"
              boot-info:
                disk-id: "{{ disk_id2 }}"
                is-fcp: "{{ is_fcp2 }}"
          cpc: "{{ z_machine_name }}"
          x86: "dummy"
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        validate_certs: false
        status_code: 200
      register: response

    - name: Update the password of SSA appliance-owner
      tags: owner
      uri:
        url: "{{ cc_url }}/user"
        body:
          username: "{{ ssa_owner_user }}"
          old_password: "{{ ssa_owner_default_password}}"
          new_password: "{{ ssa_owner_password }}"
        body_format: json
        method: PUT
        validate_certs: false
        return_content: true

    - name: Get authentication token from the ACC as appliance-owner
      tags: owner
      uri:
        url: "{{ cc_url }}/user/token"
        method: POST
        body:
          username: "{{ ssa_owner_user }}"
          password: "{{ ssa_owner_password }}"
        body_format: json
        return_content: true
        validate_certs: false
      register: auth_response

    - name: Extract the owner token
      tags: owner
      set_fact:
        access_token: "{{ auth_response.json.access_token }}"

    - name: 11 - Upload the SSA appliance image to the ACC
      tags: owner
      # Unfortunately, the uri module cannot upload binary files.
      # One can use `src`, but both `src` and `body` can't be used together.
      shell: 'curl -k -X "POST" \
              "{{ cc_url }}/images" \
              -H "Authorization: Bearer {{ access_token }}" \
              -H "Content-Type: multipart/form-data" \
              -F "data=@{{ image_path }}" \
              -F "image_type={{ image_type }}" \
              -F "min_ifls=2" -F "min_memory=51200"'

    - name: 12 - Get image information
      tags: owner
      uri:
        url: "{{ cc_url }}/images"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        validate_certs: false
      register: response

    - name: Printing the image information
      tags: owner
      debug:
        msg: "{{ response.json }}"

    - name: 13 - As owner, install and activate the image
      tags: owner
      uri:
        url: "{{ cc_url }}/cluster/activate"
        method: POST
        body:
          ssa_package:
            image_id: 1
            processor_usage: "{{ processor_usage }}"
            processor_type: "{{ processor_type }}"
            memory: 51200
            cores: 2
            username: "{{ ssa_username }}"
            password: "{{ ssa_password }}"
            hostname: "{{ hostname }}"
            lpars:
              - name: "{{ ssa_lpar1 }}"
                execution_action: "{{ execution_action }}"
                install: true
              - name: "{{ ssa_lpar2 }}"
                execution_action: "{{ execution_action }}"
                install: true
        body_format: json
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
        status_code: 200
        validate_certs: false
      register: response

    - name: Printing the response
      tags: owner, install
      debug:
        msg: "{{ response.json }}"

    - name: Wait for 15 seconds
      ansible.builtin.pause:
        seconds: 15

    - name: 14 - Get status of the install process with task_id=1
      tags: owner, install
      uri:
        url: "{{ cc_url }}/tasks/1/status"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
        validate_certs: false
      register: response

    - name: Printing the task status
      tags: owner
      debug:
        msg: "{{ response.json }}"