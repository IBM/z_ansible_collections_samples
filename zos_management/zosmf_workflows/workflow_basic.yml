###############################################################################
# Â© Copyright IBM Corporation 2021
#
# Changelog
#  All notable changes to this sample will be documented in this playbook
#
# [1.0.0] - 2021-04-21
#  - Released initial version
###############################################################################

###############################################################################
# This sample playbook demonstrates how to perform various operations with
# z/OSMF workflows on the target z/OS systems using module `zmf_workflow`
# provided by IBM z/OSMF collection included in the Red Hat Ansible Certified
# Content for IBM Z.
#
# This playbook checks whether a workflow instance with the given name exists,
# deletes the workflow instance if already exists, creates a new workflow
# instance and start it, and then checks the status of the workflow instance.
#
# Usage:
#   ansible-playbook -i <inventory> <playbook>
#
# Example:
#   ansible-playbook -i inventory.yml workflow_basic.yml
#
# Notes:
#   To run the sample playbooks, below preparation works are required:
#   - It is recommended that you use the naming rule
#     `workflow_name: "ansible_${ workflow_name }_{{ inventory_hostname }}"`
#     when creating a workflow instance.
#   - Submitting a z/OSMF workflow found on Ansible control node is currently
#     not supported. The workflow definition file
#     `workflow_sample_automation_steps.xml` is used to create the workflow
#     instance. You need to manually upload it to the target z/OS system. For
#     example, you can upload it to the directory `/var/zosmf/workflow_def/`,
#     then modify the value of variable `workflow_file` in the sample playbook
#     to refer to the location of the workflow definition file.
#   - Only automated steps are supported when starting a z/OSMF workflow.
#   - Module `zmf_authenticate` is supported by z/OSMF APAR PH12143
#     (PTF UI66511 for V2R3, PTF UI66512 for V2R4). You are also allowed to
#     authenticate with z/OSMF server with module `zmf_workflow` directly.
#
# Requirements:
#   IBM z/OSMF collection 1.0.0 or later
#
# Configure:
#   workflow_name - name of the workflow instance.
#   workflow_file - location of the workflow definition file.
###############################################################################

---
- name: perform various operations with z/OSMF workflows
  hosts: zos_systems
  gather_facts: false
  collections:
    - ibm.ibm_zosmf
  vars_prompt:
    - name: zmf_user
      prompt: "Enter your z/OSMF username (skip if zmf_crt and zmf_key are supplied)"
      private: false
    - name: zmf_password
      prompt: "Enter your z/OSMF password (skip if zmf_crt and zmf_key are supplied)"
      private: true
  tasks:
    # ##########################################################################
    # Module: zmf_authenticate
    # ##########################################################################
    # ##########################################################################
    # Authenticate with z/OSMF server
    # ##########################################################################
    - name: Authenticate with z/OSMF server
      zmf_authenticate:
        zmf_host: "{{ zmf_host }}"
        zmf_port: "{{ zmf_port }}"
        zmf_user: "{{ zmf_user }}"
        zmf_password: "{{ zmf_password }}"
      register: result_auth
      delegate_to: localhost

    # ##########################################################################
    # Module: zmf_workflow
    # ##########################################################################
    # ##########################################################################
    # 1. Check whether a workflow instance with the given name exists
    # 2. Delete the workflow instance if already exists
    # 3. Create a new workflow instance and start it
    # 4. Check the status of the workflow instance
    # ##########################################################################
    - name: Check whether a workflow instance with the given name exists
      zmf_workflow:
        state: "existed"
        zmf_credential: "{{ result_auth }}"
        workflow_name: "ansible_sample_workflow_{{ inventory_hostname }}"
      delegate_to: localhost
      register: compare_result
    - debug: var=compare_result

    - name: Delete the workflow instance if already exists
      zmf_workflow:
        state: "deleted"
        zmf_credential: "{{ result_auth }}"
        workflow_name: "ansible_sample_workflow_{{ inventory_hostname }}"
      delegate_to: localhost
      register: delete_result
      when: compare_result.workflow_key
    - debug: var=delete_result

    - name: Create a new workflow instance and start it
      zmf_workflow:
        state: "started"
        zmf_credential: "{{ result_auth }}"
        workflow_name: "ansible_sample_workflow_{{ inventory_hostname }}"
        workflow_file: "/var/zosmf/workflow_def/workflow_sample_automation_steps.xml"
        workflow_host: "{{ inventory_hostname }}"
        workflow_owner: "{{ zmf_user }}"
      delegate_to: localhost
      register: start_result
    - debug: var=start_result

    - name: Check the status of the workflow instance
      zmf_workflow:
        state: "check"
        zmf_credential: "{{ result_auth }}"
        workflow_name: "ansible_sample_workflow_{{ inventory_hostname }}"
      delegate_to: localhost
      register: check_result
    - debug: var=check_result
