###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################

###############################################################################
# This sample playbook demonstrates how to execute z/OS operator commands,
# retrieve command output and retrieve outstanding messages requiring operator
# action using modules included in the Red Hat Ansible Certified Content for
# IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories zos_operator_basics.yml
#
#  When running this playbook, review the comments on how ths sample will
#  interact with your target, ensure you have the required authority and
#  permissions such as writing the the target directories or creating data sets.
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook, for example and
#  `system_name`.
#
# Requirements:
#   IBM z/OS core collection 1.1.0 or later
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be written
#                 to for this example.
#   ctl_tmp_dir - this is the directory on the controller which will be written
#                 to for this example.
# Optional:
#   system_name - this is the system name that will be used during this example,
#                 determined by executing `uname -n` on the target.
###############################################################################

---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  vars:
    tgt_tmp_dir: "/tmp"
    ctl_tmp_dir: "/tmp"
  environment: "{{ environment_vars }}"

  tasks:
    # ##########################################################################
    # Fact setting for use by this playbook
    # ##########################################################################
    - name: Detecting system name
      #shell: "uname -a |awk '{print $2}'"
      command: uname -n
      register: result

    - name: Setting fact `system_name` for use by this sample
      set_fact:
        system_name: "{{ result.stdout }}"

    - name: Fact `system_name` set with value
      debug:
        msg: "{{ system_name }}"

    # ##########################################################################
    # Modules zos_operator_action_query, zos_operator
    # ##########################################################################
    # +-------------------------------------------------------------------------
    # | Create an actionable operator message (WTOR),
    # | 'IEE094D SPECIFY OPERAND(S) FOR DUMP COMMAND', query operator actions,
    # | parse module response for reply number, reply with cancel, display
    # | actionable,operator actions.
    # +-------------------------------------------------------------------------

    - name: Query actionable messages on system {{ system_name }}
      zos_operator_action_query:
        system: "{{ system_name }}"
      register: result_zos_operator_action_pre_query

    - name: Response for query actionable messages on system {{ system_name }}
      debug:
        msg: "{{ result_zos_operator_action_pre_query }}"
      when: result_zos_operator_action_pre_query is defined and not result_zos_operator_action_pre_query.failed

    - name: Filter actionable messages that match 'IEE094D SPECIFY OPERAND', if more than one is found this demo will skip the operator task.
      set_fact:
        bool_zos_operator_action_continue: "{{ result_zos_operator_action_pre_query | ibm.ibm_zos_core.filter_wtor_messages('IEE094D SPECIFY OPERAND') | length == 0}}"
      when: result_zos_operator_action_pre_query is defined and not result_zos_operator_action_pre_query.failed

    - name: Evaluate if there are any existing dump messages matching 'IEE094D SPECIFY OPERAND'
      assert:
        that:
          - bool_zos_operator_action_continue is defined
          - bool_zos_operator_action_continue
        success_msg: "Operator demo will continue, no matching 'IEE094D SPECIFY OPERAND' actions were discovered."
        fail_msg: "There are more than one actionable messages that matches 'IEE094D SPECIFY OPERAND' , skipping operator demo. "
      ignore_errors: yes

    - name: Create an operator action (WTOR) "DUMP COMM=('test dump')" for
        system {{ system_name }}
      zos_operator:
        cmd: "DUMP COMM=('test dump')"
      register: result_zos_operator
      when: bool_zos_operator_action_continue

    - name: Response for create an operator action
        (WTOR) "DUMP COMM=('test dump')" for system {{ system_name }}
      debug:
        msg: "{{ result_zos_operator }}"
      when: bool_zos_operator_action_continue

    - name: Query actionable messages on system {{ system_name }}
      zos_operator_action_query:
        system: "{{ system_name }}"
      register: result_zos_operator_action_query
      when: bool_zos_operator_action_continue

    - name: Response for query actionable messages on system {{ system_name }}
      debug:
        msg: "{{ result_zos_operator_action_query }}"
      when: bool_zos_operator_action_continue and result_zos_operator_action_query is defined and not result_zos_operator_action_query.failed

    - name: Filter actionable messages that match only 'DUMP'
      set_fact:
        filtered_zos_operator_action_query: "{{ result_zos_operator_action_query | ibm.ibm_zos_core.filter_wtor_messages('IEE094D SPECIFY OPERAND') }}"
      when: bool_zos_operator_action_continue and result_zos_operator_action_query is defined and not result_zos_operator_action_query.failed

    - name: Response for filter actionable messages that match only 'DUMP'
      debug:
        msg: "{{ filtered_zos_operator_action_query }}"
      when: bool_zos_operator_action_continue and filtered_zos_operator_action_query is defined

    - name: Set reply value if there is one matching actionable message
      set_fact:
        reply_num: "{{ result_zos_operator_action_query.actions[0].number }}"
      when: bool_zos_operator_action_continue and filtered_zos_operator_action_query is defined and  (filtered_zos_operator_action_query | length == 1)

    - name: Reply to operator action with "end"
      zos_operator:
        cmd: "{{ reply_num}}end"
      register: result_zos_operator_end
      when: bool_zos_operator_action_continue and reply_num is defined

    - name: Response for reply to operator action with "cancel"
      debug:
        msg: "{{ result_zos_operator_end }}"
      when: bool_zos_operator_action_continue and result_zos_operator_end is defined and reply_num is defined

    - name: Verify actionable message on system {{ system_name }} is canceled
      zos_operator_action_query:
        system: "{{ system_name }}"
      register: results_zos_operator_action_query_verify
      when: bool_zos_operator_action_continue

    - name: Verify no actionable messages match 'IEE094D SPECIFY OPERAND' with filter
      set_fact:
        filtered_zos_operator_action_query_verify: "{{ results_zos_operator_action_query_verify | ibm.ibm_zos_core.filter_wtor_messages('IEE094D SPECIFY OPERAND') }}"
      when: bool_zos_operator_action_continue and results_zos_operator_action_query_verify is defined and not results_zos_operator_action_query_verify.failed

    - name: Response for verifying actionable messages on system {{ system_name }} are canceled
      assert:
        that:
          - bool_zos_operator_action_continue
          - filtered_zos_operator_action_query_verify is defined and  (filtered_zos_operator_action_query_verify | length == 0)
        success_msg: "All actionable messages that match 'IEE094D SPECIFY OPERAND' have been cancelled"
        fail_msg: "There are more than one remaining actionable messages that match 'IEE094D SPECIFY OPERAND' , unable to reply to more than one action. "
      ignore_errors: yes
