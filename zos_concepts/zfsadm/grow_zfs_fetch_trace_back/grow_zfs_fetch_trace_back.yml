###############################################################################
# Â© Copyright IBM Corporation 2025
###############################################################################

###############################################################################
# This sample playbook demonstrates how create a zfs aggregate, mount a zfs
# aggregate, create a data set to trace back operations, grow a zfs aggregate
# getting the trace back on the data set created and fetch the trace back data set.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories grow_zfs_fetch_trace_back.yml
#
#  When running this playbook, review the comments on how ths sample will
#  interact with your target, ensure you have the required authority and
#  permissions such as writing the the target directories or creating data sets.
#
# Requirements:
#     - IBM z/OS core collection 1.13.0 or later
#
###############################################################################

---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    mount_point: "/tmp/zfs_aggr"
    aggr_growth_size: 2000

  tasks:
    # ##########################################################################
    # Generate temporary data set names
    # ##########################################################################
    - name: Create temp data set name
      command: "mvstmp {{ ansible_user | upper }}"
      register: tmp_ds1

    - name: Create temp data set name
      command: "mvstmp {{ ansible_user | upper }}"
      register: tmp_ds2

    - set_fact:
        zfs_data_set: "{{ tmp_ds1.stdout }}"
        trace_back_data_set: "{{ tmp_ds2.stdout }}"
        trace_back_data_set_mem: "{{ tmp_ds2.stdout }}(MEM)"

    # ##########################################################################
    # Modules: zos_data_set, zos_zfs_resize, zos_fetch
    # ##########################################################################
    # +-------------------------------------------------------------------------
    # | - Using zos_data_set, create zFS data set {{ zfs_data_set }}.
    # | - Using zos_mount, mount zFS {{ zfs_data_set }} on {{ mount_point }}.
    # | - Using zos_data_set, create a PDSE.
    # | - Using zos_data_set, create a member in the PDSE to get the full trace back.
    # | - Using zos_zfs_resize, resize data set {{ zfs_data_set }}.
    # | - Using zos_fetch, to fetch the trace back member of the grow operation.
    # +-------------------------------------------------------------------------

    # ##########################################################################
    # Create and mount zFS data set.
    # ##########################################################################

    - name: "Create zFS."
      zos_data_set:
        name: "{{ zfs_data_set }}"
        type: zfs
        space_primary: 1
        space_type: m
        replace: true

    - name: "Create mount dir on z/OS USS."
      file:
        path: "{{ mount_point }}"
        state: directory

    - name: "Mount zFS data set."
      zos_mount:
        src: "{{ zfs_data_set | upper }}"
        path: "{{ mount_point }}"
        fs_type: zfs
        state: mounted

    - name: "Confirm mount point."
      command: "df /{{ mount_point }}"
      register: df_output

    - name: "Echo df output."
      debug:
        msg: "{{ df_output.stdout_lines }}"

    # ##########################################################################
    # Create PDSE and member for the full trace back.
    # ##########################################################################

    - name: "Create data set that will contain the trace back."
      zos_data_set:
        name: "{{ trace_back_data_set }}"
        record_length: 400
        type: pdse
        record_format: vb
        space_type: k
        space_primary: 42000

    - name: "Create member for the trace."
      zos_data_set:
        name: "{{ trace_back_data_set_mem }}"
        type: member

    # ##########################################################################
    # Fill up zFS aggregate with random data.
    # ##########################################################################

    - name: "Write 1 million bytes to zFS."
      shell: head -c 1000000 /dev/urandom > {{ mount_point }}/test.txt

    # ##########################################################################
    # Grow zFS aggregate.
    # See the full stdout.
    # Fetch the full trace back
    # ##########################################################################

    - name: "Grow zFS aggregate and get trace back on data set {{ trace_back_data_set }}."
      zos_zfs_resize:
        target: "{{ zfs_data_set }}"
        size: "{{ aggr_growth_size }}"
        trace_destination: "{{ trace_back_data_set_mem }}"
      register: grow_output

    - name: Echo grow_output.
      debug:
        msg: "{{ grow_output }}"

    - name: "Fetch {{ trace_back_data_set }} to the local controller."
      zos_fetch:
        src: "{{ trace_back_data_set_mem }}"
        dest: "{{ playbook_dir }}/"
      register: fetch_result

    - name: "Result of Fetch {{ trace_back_data_set_mem }} to the local machine."
      debug:
        msg: "{{ fetch_result }}"

    # ##########################################################################
    # clean up - unmount and delete ZFS data sets
    # ##########################################################################

    - name: Unmount zFS data set.
      command: "/usr/sbin/unmount {{ mount_point }}"

    - name: Delete zFS data set.
      zos_data_set:
        name: "{{ zfs_data_set }}"
        state: absent

    - name: Delete trace_dataset.
      zos_data_set:
        name: "{{ trace_back_data_set }}"
        state: absent