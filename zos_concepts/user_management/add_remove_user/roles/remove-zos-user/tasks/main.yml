---
# Copyright (c) IBM Corporation 2020

# tasks file for remove-zos-user
- name: Set omvs_home_directory if not set
  set_fact:
    omvs_home_directory: "/u/{{ userid }}"
  when: omvs_home_directory is not defined or not omvs_home_directory

- name: Get information about the user
  ibm.ibm_zos_core.zos_tso_command:
    commands: LISTUSER ({{ userid | upper }})
  register: listuser_response
  failed_when: false

- block:
    - name: Remove user from groups, assign new owner for group data sets
      ibm.ibm_zos_core.zos_tso_command:
        commands: "{{ lookup('template', '../templates/remove-from-group.j2') }}"
      with_items: '{{ listuser_response.get("output", [{}])[0].get("content", [""]) | user_groups }}'

    - name: Delete user data sets
      command: "drm {{ userid | upper }}.**"
      register: drm_response
      failed_when: drm_response.get("rc", 1) > 0 and "BGYSC1503E" not in drm_response.get("stderr", "")

    - name: Delete alias from catalog
      ibm.ibm_zos_core.zos_tso_command:
        commands: "DELETE '{{ userid | upper }}' ALIAS"
      ignore_errors: true

    - name: Delete generic profile
      ibm.ibm_zos_core.zos_tso_command:
        commands: "DELDSD '{{ userid | upper }}.**'"
      ignore_errors: true

    - name: Delete generic profile
      ibm.ibm_zos_core.zos_tso_command:
        commands: "DELDSD '{{ userid | upper }}.*'"
      ignore_errors: true

    - name: Remove the user
      ibm.ibm_zos_core.zos_tso_command:
        commands: "DELUSER ({{ userid | upper }})"
  when: '"UNABLE TO LOCATE USER" not in listuser_response.get("output", [{}])[0].get("content", [""])[0]'

- name: Get information about user's home directory
  stat:
    path: "{{ omvs_home_directory }}"
  register: stat_response

- name: Unmount the user's ZFS data set
  command: unmount {{ omvs_home_directory }}
  when: stat_response.stat.isdir is defined and stat_response.stat.isdir

- name: Remove the user's ZFS data set
  ibm.ibm_zos_core.zos_data_set:
    name: "{{ omvs_zfs_data_set_name }}"
    state: absent

- name: Remove the user's omvs directory
  file:
    path: "{{ omvs_home_directory }}"
    state: absent

- name: Remove persistent mount
  block:
    - name: Generate tempfile to hold BPXPRMxx
      tempfile:
        state: file
      register: temp

    - name: Generate tempfile to hold backup
      tempfile:
        state: file
      register: backup

    - name: Copy BPXPRMxx member to file
      shell: cp "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'" {{ temp.path }}

    - name: Copy BPXPRMxx member to backup
      shell: cp "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'" {{ backup.path }}

    - name: Get file contents
      command: cat {{ temp.path }}
      register: cat_response

    - name: Remove mount from contents
      set_fact:
        updated_contents: "{{ cat_response.stdout | remove_mount(omvs_zfs_data_set_name, omvs_home_directory) }}"

    - name: Insert updated contents back into temp file
      ibm.ibm_zos_core.zos_copy:
        content: "{{ updated_contents }}"
        dest: "{{ temp.path }}"
        encoding:
          from: ISO8859-1
          to: "{{ target_charset }}"

    - name: Copy updated BPXPRMxx member back to data set
      shell: cp {{ temp.path }} "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'"

    - name: Verify updated contents are valid
      ibm.ibm_zos_core.zos_operator:
        cmd: "SETOMVS SYNTAXCHECK=({{ bpxprm_member | upper }})"
      register: syntaxcheck_response
      ignore_errors: true

    - name: Undo mount changes if bad syntaxcheck
      shell: cp {{ backup.path }} "//'{{ bpxprm_data_set | upper }}(BPXPRM{{ bpxprm_member | upper }})'"
      when: syntaxcheck_response.get("rc", 4) > 0

    - name: Assert persistent mount did not fail
      fail:
        msg: "Persistent mount updated did not pass syntax check."
      when: syntaxcheck_response.get("rc", 4) > 0
  always:
    - name: Remove temporary file
      file:
        path: "{{ temp.path }}"
        state: absent
      when: temp.path is defined and temp.path
    - name: Remove backup file
      file:
        path: "{{ backup.path }}"
        state: absent
      when: backup.path is defined and backup.path
  when: bpxprm_member is defined and bpxprm_member
