---
# DBRC Services
- name: DBRC Services
  collections:
    - ibm.ibm_zos_core
    - ibm.ibm_zos_ims

  block:

    - when: dbrc_defaults
      block:
        - ansible.builtin.set_fact:
            eager_role_path: '{{role_path}}'
# --------------------------------------------------------------------------------------------------- DFSDFDRC
        - name: Specify DBRC defaults
          zos_mvs_raw:
            program_name: ASMA90
            parm: "NOOBJ,DECK"
            dds:
              - dd_data_set:
                  dd_name: SYSLIB
                  data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSMAC"
                  disposition: shr
              - dd_data_set:
                  dd_name: SYSPUNCH
                  data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.OBJDSET(DFSIDEF0)"
                  disposition: old
              - dd_output:
                  dd_name: sysprint
                  return_content:
                    type: text
              - dd_input:
                  dd_name: SYSUT1
                  content:
                    - "UNIT={{ DFS_IMS_UNIT }},DISP=(,DELETE),SPACE=(CYL,(15,15))"
              - dd_input:
                  dd_name: SYSIN
                  content:
                    - "IDEF0    TITLE 'DFSIDEF0 - IMS INSTALLATION DEFAULTS BLOCK'"
                    - "DFSIDEF0 CSECT"
                    - "         SPACE 1"
                    - "         DFSIDEF TYPE=BEGIN"
                    - "*-----------------------------------------------------------------*"
                    - "*  DBRC=  DBRC FOR BATCH                                          *"
                    - "*    DBRC=YES -  USE DBRC.                                        *"
                    - "*    DBRC=NO  -  DO NOT USE DBRC                                  *"
                    - "*    DBRC=FORCE - USE DBRC. CAN NOT BE OVERRIDDEN WITH EXEC PARM  *"
                    - "*-----------------------------------------------------------------*"
                    - "         DFSIDEF TYPE=PARM,DBRC=YES"
                    - "*****    DFSIDEF TYPE=PARM,DBRC=NO"
                    - "*****    DFSIDEF TYPE=PARM,DBRC=FORCE"
                    - "         DFSIDEF TYPE=PARM,SVC2={{zCloud_IMS_SVC_Type2}}"
                    - "         DFSIDEF TYPE=PARM,SVC4={{zCloud_IMS_SVC_Type4}}"
                    - "         DFSIDEF TYPE=END"
                    - "         END   DFSIDEF0"

        - name: BIND DFSIDEF0
          zos_mvs_raw:
            program_name: iewl
            parm: "SIZE=(880K,64K),NCAL,LET,REUS,XREF,LIST"
            dds:
              - dd_output:
                  dd_name: sysprint
                  return_content:
                    type: text
              - dd_data_set:
                  dd_name: SYSPUNCH
                  data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.OBJDSET"
                  disposition: shr
              - dd_data_set:
                  dd_name: SYSLMOD
                  data_set_name: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"
                  disposition: shr
              - dd_input:
                  dd_name: SYSUT1
                  content:
                    - "UNIT=(SYSALLDA,SEP=(SYSLMOD,SYSLIN)),SPACE=(CYL,(10,1))"
              - dd_input:
                  dd_name: SYSLIN
                  content:
                    - "   INCLUDE SYSPUNCH(DFSIDEF0)"
                    - "   NAME  DFSIDEF0(R)"
# ---------------------------------------------------------------------------------------------------

    - when: prep_dbrc
      block:
        - ansible.builtin.set_fact:
            eager_role_path: '{{role_path}}'
# --------------------------------------------------------------------------------------------------- DFSE314J
        - name: INITIALIZE THE RECON DATA SETS
          ims_dbrc:
            command:
              - "  INIT.RECON SSID({{ DFS_IMS_SSID }}) CATDS -"
              - "             NOFORCER CHECK44 NONEW -"
              - "             DASDUNIT({{ DFS_IMS_UNIT }}) TAPEUNIT()"
            steplib:
              - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.SDFSRESL"
              - "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.DBDLIB"
            genjcl_input_dataset: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PROCLIB"
            recon1: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.RECON1"
            recon2: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.RECON2"
            recon3: "{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.RECON3"

    - block:
        - ansible.builtin.set_fact:
            eager_role_path: '{{role_path}}'
    - name: COPYSKEL SKELETONS
      when: prep_dbrc
      block:
        - ansible.builtin.set_fact:
            eager_role_path: '{{role_path}}'
        - name: Create temporary directory to store SKELETONS
          ansible.builtin.tempfile:
            state: directory
          register: skt_tmp_dir
        - name: Send SKELETONS member templates to USS directory
          ansible.builtin.include_role:
            name: send-templates
          vars:
            template_path: '{{eager_role_path}}/templates/Skeletons/*'
            uss_file_path: '{{ skt_tmp_dir.path }}'
        - name: Remove extensions from filenames
          ansible.builtin.shell: >
            for procname in $(ls *.j2); do
            basename="$(echo ${procname} | cut -d'.' -f1)";
            cp ${procname} "//'{{ DFS_AUTH_LIB_HLQ1 }}.{{ DFS_AUTH_LIB_HLQ2 }}.PROCLIB(${basename})'" ;
            done
          args:
            chdir: '{{ skt_tmp_dir.path }}'
      always:
        - name: Delete the temporary SKELETONS files directory
          ansible.builtin.file:
            path: '{{ skt_tmp_dir.path }}'
            state: absent
# ---------------------------------------------------------------------------------------------------
