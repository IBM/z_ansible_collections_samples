- name: Gather and send z topology and missing APARs to Concert
  hosts: all
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    zmf_host: ''
    zmf_port: ''
    zmf_user: ''
    zmf_password: ''
    zDLA_host: ''
    zDLA_port: ''
    zDLA_token: ''
    izsam_jcl: ''
    izsam_csv_dsn: ''
    concert_hostname: ''
    concert_port: ''

    swilist: []
    collated_swi: {}

    zDLA_list: []
    collated_zDLA_node: {}

  tasks:
    - name: Locating all files in playbook_output directory
      ansible.builtin.find:
        path: "{{ playbook_dir }}/playbook_output"
      register: cleanup
      delegate_to: localhost
      ignore_errors: true

    - name: Removing all files previously found in playbook_output dir
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ cleanup.files }}"
      delegate_to: localhost
      ignore_errors: true

    #####################################################################################
    # PLAY #1: Retrieve z Discovery data                                                #
    #####################################################################################
    - name: Get zDLA Nodes
      ansible.builtin.uri:
        url: "https://{{ zDLA_host }}:{{ zDLA_port }}/zrdds/api/v1/instance/nodes?nodeType=ZOS"
        method: GET
        headers:
          ApiToken: '{{ zDLA_token }}'
        validate_certs: false
      register: zDiscovery_data
      delegate_to: localhost

    - name: Get z Discovery detail
      ansible.builtin.include_tasks: build_zdiscovery_data.yml
      loop: "{{ zDiscovery_data.json }}"

    - name: Save z Discovery data into a JSON file
      ansible.builtin.copy:
        content: "{{ zDLA_list | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/zdiscovery_data.json"
      delegate_to: localhost

    #####################################################################################
    # PLAY #2: Retrieve all SW Instances                                                #
    #####################################################################################
    - name: Get zosmf software instances
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/swmgmt/swi"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: instance_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        swi_list: '{{ instance_data.json.swilist }}'

    - name: Save SWI to a json file
      ansible.builtin.copy:
        content: "{{ instance_data.json | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/swi.json"
      delegate_to: localhost

    #####################################################################################
    # PLAY #3: Identify missing critical software updates for each SW Instance          #
    #####################################################################################
    - name: Get MCU
      ansible.builtin.include_tasks: build_swi_collated.yml
      loop: "{{ swi_list }}"
      when:
        - item.name is defined and ( item.name.startswith('Db2_V13R1M0') or item.name.startswith('Db2_V12R1M0') )

    - name: Update collated SWI
      ansible.builtin.set_fact:
        collated_swi: "{{ collated_swi | default({}) | combine ({
                'swilist': swilist
                }) }}"

    - ansible.builtin.debug:
        var: collated_swi

    - name: Save SWI to a json file
      ansible.builtin.copy:
        content: "{{ collated_swi | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/swi_collated.json"
      delegate_to: localhost

    # #####################################################################################
    # # PLAY #4: Get zosmf system topology                                                #
    # #####################################################################################
    - name: Get zosmf software instance detail
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/resttopology/systems"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: zmf_topology_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        info: "{{zmf_topology_data.content}}"

    - name: Save SWI to a json file
      ansible.builtin.copy:
        content: "{{ info | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/resttopology.json"
      delegate_to: localhost

    #####################################################################################
    # PLAY #5: Get SW Usage report from IZSAM                                           #
    #####################################################################################
    - name: Submit JCL in a PDSE member
      ibm.ibm_zos_core.zos_job_submit:
        src: "{{izsam_jcl}}"
        location: data_set
        wait_time_s: 30
      register: izsam_job_output

    # - name: Get software usage data from IZSAM
    #   ibm.ibm_zos_core.zos_job_submit:
    #     src: '{{ playbook_dir }}/HSICANLZ.J2'
    #     location: local
    #     use_template: true
    #   register: izsam_job_output

    - name: Fetch CSV to local
      ibm.ibm_zos_core.zos_fetch:
        src: "{{izsam_csv_dsn}}"
        dest: "{{ playbook_dir }}/playbook_output/izsam_detail.csv"
        flat: true

    - name: Send cert data to IBM Concert
      ansible.builtin.shell: |
        /usr/bin/curl -X POST http://{{concert_hostname}}:{{concert_port}}/upload \
            --form zosmf_swi=@playbook_output/swi_collated.json \
            --form zdiscovery=@playbook_output/zdiscovery_data.json \
            --form izsam=@playbook_output/izsam_detail.csv \
            --form zosmf_resttopology=@playbook_output/resttopology.json
      delegate_to: localhost
      # ignore_errors: true

    # - name: Send cert data to IBM Concert
    #   ansible.builtin.shell: |
    #       /usr/bin/curl -k -X POST https://{{ zos_host }}/ingestion/api/v1/upload_files \
    #           -H 'Content-Type: multipart/form-data' \
    #           -H 'InstanceId: {{concert_instance_id}}' \
    #           -H 'Accept: application/json' \
    #           -H 'Authorization: {{ concert_api_key_type }} {{ concert_api_key }}' \
    #           -F 'data_type=certificate' \
    #           -F 'filename=@{{ playbook_dir }}/{{ izsam_usage.csv' \
    #           -F 'metadata={"env_name" : "z/OS"}'
    #   delegate_to: localhost
