- name: Gather and send z topology and missing APARs to Concert
  hosts: all
  gather_facts: no
  collections:
    - ibm.ibm_zosmf

  vars:
    zmf_host: ''
    zmf_port: ''
    zmf_user: ''
    zmf_password: ''
    zDLA_host: ''
    zDLA_port: ''
    zDLA_token: ''

  tasks:
    #####################################################################################
    # PLAY #1: Retrieve z Discovery data                                                #
    #####################################################################################
    - ansible.builtin.uri:
        url: "https://{{ zDLA_host }}:{{ zDLA_port }}/zrdds/api/v1/instance/nodes"
        method: GET
        headers:
          ApiToken: '{{ zDLA_token }}'
        validate_certs: false
      register: zDiscovery_data
      delegate_to: localhost

    - name: Save z Discovery data into a JSON file
      ansible.builtin.copy:
        content: "{{ zDiscovery_data | to_nice_json }}" 
        dest: "./zDiscovery_data.json"
      delegate_to: localhost

    # - name: Send cert data to IBM Concert
    #   ansible.builtin.shell: |
    #       /usr/bin/curl -k -X POST https://{{ zos_host }}/ingestion/api/v1/upload_files \
    #           -H 'Content-Type: multipart/form-data' \
    #           -H 'InstanceId: {{concert_instance_id}}' \
    #           -H 'Accept: application/json' \
    #           -H 'Authorization: {{ concert_api_key_type }} {{ concert_api_key }}' \
    #           -F 'data_type=certificate' \
    #           -F 'filename=@{{ playbook_dir }}/{{ zDiscovery_data.json }}' \
    #           -F 'metadata={"env_name" : "z/OS"}'
    #   delegate_to: localhost

    #####################################################################################
    # PLAY #2: Retrieve all SW Instances                                                #
    #####################################################################################
    - ansible.builtin.uri:
        url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/swmgmt/swi"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: instance_data
      delegate_to: localhost

    - set_fact:
        swi_list: '{{ instance_data.json.swilist }}'

    #####################################################################################
    # PLAY #3: Identify missing critical software updates for each SW Instance          #
    #####################################################################################
    - block:  
        - name: Identify Missing Critical Software Updates
          ansible.builtin.include_role:
            name: zmf_swmgmt_identify_missing_critical_updates
          vars: 
            software_instance_name: '{{ item.name }}'
            system_nickname: '{{item.system}}'
            missing_critical_updates_response_file: '{{ software_instance_name }}-MissingCriticalUpdatesReport.json'

        # - name: Send cert data to IBM Concert
        #   ansible.builtin.shell: |
        #       /usr/bin/curl -k -X POST https://{{ zos_host }}/ingestion/api/v1/upload_files \
        #           -H 'Content-Type: multipart/form-data' \
        #           -H 'InstanceId: {{concert_instance_id}}' \
        #           -H 'Accept: application/json' \
        #           -H 'Authorization: {{ concert_api_key_type }} {{ concert_api_key }}' \
        #           -F 'data_type=certificate' \
        #           -F 'filename=@{{ playbook_dir }}/{{ software_instance_name }}-MissingCriticalUpdatesReport.json' \
        #           -F 'metadata={"env_name" : "z/OS"}'
        #   delegate_to: localhost

        
          loop: "{{ swi_list }}"
          # when: item.name is defined and not item.name is search('PTF')
          when: 
            - item.name is defined and ( item.name.startswith('zos31') or item.name.startswith('db2') )

        # - name: Identify Missing Fixcat Software Updates
        #   ansible.builtin.include_role:
        #     name: zmf_swmgmt_identify_missing_fixcat_updates
        #   vars: 
        #     software_instance_name: '{{ item.name }}'
        #     system_nickname: '{{item.system}}'
        #     missing_fixcat_updates_response_file: '{{ software_instance_name }}-MissingFixcatUpdatesReport.json'
        #   loop: "{{ swi_list }}"
        #   # when: item.name is defined and not item.name is search('PTF')
        #   when: 
            # - item.name is defined and ( item.name.startswith('ims1') or item.name.startswith('db2') )
          
      ignore_errors: true

    # #####################################################################################
    # # PLAY #4: Search SW Instance for software updates.                                 #
    # #####################################################################################
    # - name: Search for Software Updates
    #   ansible.builtin.include_role:
    #         name: zmf_swmgmt_search_software_updates
    #   vars:
    #     software_instance_name: '{{ item.name }}'
    #     system_nickname: '{{item.system}}'
    #     search_software_updates_response_file: '{{ software_instance_name }}-SoftwareUpdateSearchReport.json'
    #     updates: 
    #        - AH41952

    #####################################################################################
    # PLAY #5: Get SW Usage report from IZSAM                                           #
    #####################################################################################
    # - name: Get software usage data from IZSAM
    #   ibm.ibm_zos_core.zos_job_submit:
    #     src: '{{ playbook_dir }}/HSICANLZ.J2'
    #     location: local
    #     use_template: true
    #   register: izsam_job_output

    # - name: Fetch CSV to local
    #   ibm.ibm_zos_core.zos_fetch:
    #     src: "{{ ansible_user }}.IZSAMALZ.CSV"
    #     dest: "{{ playbook_dir }}/{{ izsam_usage.csv }}"
    #     # encoding:
    #     #   from: ISO8859-1
    #     #   to: ISO8859-1
    #     flat: true

    # - name: Send cert data to IBM Concert
    #   ansible.builtin.shell: |
    #       /usr/bin/curl -k -X POST https://{{ zos_host }}/ingestion/api/v1/upload_files \
    #           -H 'Content-Type: multipart/form-data' \
    #           -H 'InstanceId: {{concert_instance_id}}' \
    #           -H 'Accept: application/json' \
    #           -H 'Authorization: {{ concert_api_key_type }} {{ concert_api_key }}' \
    #           -F 'data_type=certificate' \
    #           -F 'filename=@{{ playbook_dir }}/{{ izsam_usage.csv' \
    #           -F 'metadata={"env_name" : "z/OS"}'
    #   delegate_to: localhost