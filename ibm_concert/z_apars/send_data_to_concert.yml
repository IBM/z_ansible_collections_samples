- name: Gather and send z topology and missing APARs to Concert
  hosts: all
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    zmf_port: ''
    zmf_user: ''
    zmf_password: ''
    izsam_jcl: ''
    izsam_csv_dsn: ''
    concert_api_hostname: ''
    concert_api_port: ''
    concert_url: ''
    concert_ai_key: ''

    fmid_fix_list: []
    csi_fmid_entry: {}
    csi_info: {}
    csi_libs_entries: []
    csi_unix_entries: []
    csi_datasets: {}
    swilist: []
    collated_swi: {}

    zDLA_list: []
    collated_zDLA_node: {}

  tasks:
    - name: Locating all files in playbook_output directory
      ansible.builtin.find:
        path: "{{ playbook_dir }}/playbook_output"
      register: cleanup
      delegate_to: localhost
      ignore_errors: true

    - name: Removing all files previously found in playbook_output dir
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ cleanup.files }}"
      delegate_to: localhost
      ignore_errors: true

    #####################################################################################
    # PLAY #1: Retrieve all SW Instances                                                #
    #####################################################################################
    - name: Get zosmf software instances
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}:{{ zmf_port }}/zosmf/swmgmt/swi"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: instance_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        swi_list: '{{ instance_data.json.swilist }}'

    - name: Save SWI to a json file
      ansible.builtin.copy:
        content: "{{ instance_data.json | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/swi.json"
      delegate_to: localhost

    #####################################################################################
    # PLAY #2: Build collated data for each SW Instance                                 #
    #####################################################################################
    - name: Build collated SWI list
      ansible.builtin.include_tasks: tasks/build_swi_collated.yml
      vars:
        outer_var: "{{ outer_item }}"
      loop: "{{ swi_list }}"
      loop_control:
        loop_var: outer_item
      no_log: true
      when:
        - outer_item.name is defined and not ( outer_item.name.startswith('ASF_V2R1M0') )
        # - outer_item.name is defined and outer_item.name.startswith('SA_V4R3M0')
        # - outer_item.name is defined and outer_item.name.startswith('Db2_V12R1M0')
        # - outer_item.name is defined and outer_item.name.startswith('Db2_V13R1M0')
      ignore_errors: true

    - name: Update collated SWI
      ansible.builtin.set_fact:
        collated_swi: "{{ collated_swi | default({}) | combine ({
                'swilist': swilist
                }) }}"

    - name: Save collated SWI to a json file
      ansible.builtin.copy:
        content: "{{ collated_swi | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/swi_collated.json"
      delegate_to: localhost

    # #####################################################################################
    # # PLAY #3: Get zosmf system topology                                                #
    # #####################################################################################
    - name: Get zosmf topology
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/resttopology/systems"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: zmf_topology_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        info: "{{zmf_topology_data.content}}"

    - name: Save zOSMF Topology to a json file
      ansible.builtin.copy:
        content: "{{ info | to_nice_json }}"
        dest: "{{ playbook_dir }}/playbook_output/resttopology.json"
      delegate_to: localhost


    # - name: Send zOSMF data to IBM Concert
    #   ansible.builtin.shell: |
    #     /usr/bin/curl -k -X POST http://{{concert_api_hostname}}:{{concert_api_port}}/upload/zosmf/ \
    #         -F zosmf_swi=@playbook_output/swi_collated.json \
    #         -F zosmf_resttopology=@playbook_output/resttopology.json \
    #         -H 'Concert-API-Key: "{{ concert_api_key }}"' \
    #         -H 'Concert-URL: "{{ concert_url }}"'
    #   delegate_to: localhost

    #####################################################################################
    # PLAY #4: Get SW Usage report from IZSAM                                           #
    #####################################################################################
    - name: Submit JCL in a PDSE member
      ibm.ibm_zos_core.zos_job_submit:
        src: "{{izsam_jcl}}"
        location: data_set
        wait_time_s: 30
      register: izsam_job_output

    - name: Fetch CSV to local
      ibm.ibm_zos_core.zos_fetch:
        src: "{{izsam_csv_dsn}}"
        dest: "{{ playbook_dir }}/playbook_output/izsam_detail.csv"
        flat: true

    - name: Send IZSAM data to IBM Concert
      ansible.builtin.shell: |
        /usr/bin/curl -k -X POST http://{{concert_api_hostname}}:{{concert_api_port}}/upload \
            -F zosmf_swi=@playbook_output/swi_collated.json \
            -F zosmf_resttopology=@playbook_output/resttopology.json \
            -F izsam=@playbook_output/izsam_detail.csv \
            -H 'Concert-API-Key: "{{ concert_api_key }}"' \
            -H 'Concert-URL: "{{ concert_url }}"'
      delegate_to: localhost
