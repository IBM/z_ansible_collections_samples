- block:
    - name: Reset working variables
      ansible.builtin.set_fact:
        fmid_list: []
        fmid_entries: []
        csi_info: {}

    - name: Identify Missing Critical Software Updates
      ansible.builtin.include_role:
        name: ibm.ibm_zosmf.zmf_swmgmt_identify_missing_critical_updates
      vars:
        software_instance_name: '{{ item.name }}'
        system_nickname: '{{item.system}}'
        missing_critical_updates_response_file: '{{ playbook_dir }}/playbook_output/{{ software_instance_name }}-MissingCriticalUpdatesReport.json'

    - name: Identify Missing Critical Software Updates
      ansible.builtin.include_role:
        name: ibm.ibm_zosmf.zmf_swmgmt_identify_missing_fixcat_updates
      vars:
        software_instance_name: '{{ item.name }}'
        system_nickname: '{{item.system}}'
        missing_fixcat_updates_response_file: '{{ playbook_dir }}/playbook_output/{{ software_instance_name }}-MissingFixcatUpdatesReport.json'

    - name: Get zosmf CSI
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/swmgmt/swi/{{item.swiuuid}}/csiquery"
        method: POST
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        body_format: json
        body:
          zones: ["ALLTZONES"]
          entries: ["SYSMOD"]
          subentries: ["FMID,SUPING,SMODTYPE,INSTALLDATE"]
          filter: "SMODTYPE='PTF'| SMODTYPE='APAR'"
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        validate_certs: false
        return_content: true
        status_code: "202"
      register: csi_data
      delegate_to: localhost
  ignore_errors: true

- block:
    - name: Get zosmf CSI
      ansible.builtin.uri:
        url: "{{ csi_data.json.statusurl}}"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        validate_certs: false
        return_content: true
        status_code: "200"
      register: csi_ds
      delegate_to: localhost

    - name: Loop thru CSI APAR entries
      ansible.builtin.set_fact:
        fmid_list: '{{ fmid_list | default([]) + [item.subentries[0].FMID[0]] }}'
      when: item.subentries is defined
      loop: "{{ csi_ds.json.entries}}"
      loop_control:
        label: "{{item.entryname}}"

    - name: Count items in a list
      ansible.builtin.set_fact:
        fmid_map: "{{ fmid_list | community.general.counter }}"

    - name: Add FMID to a list
      ansible.builtin.set_fact:
        fmid_entries: "{{ fmid_entries | default([]) + [{'FMID': item.key,
              'resolved_apar_count': item.value}] }}"
      with_dict: "{{ fmid_map }}"

    - name: Build csi_ds
      ansible.builtin.set_fact:
        csi_info: "{{ csi_info | default({}) | combine ({
                'entries': fmid_entries
                }) }}"

    # Assisted by watsonx Code Assistant
    # Code generated by WCA@IBM in this programming language is not approved for use in IBM product development.
    - name: Read json file
      ansible.builtin.slurp:
        src: "{{ playbook_dir }}/playbook_output/{{ item.name }}-MissingCriticalUpdatesReport.json"
      register: mcu_file_content
      delegate_to: localhost

    # Assisted by watsonx Code Assistant
    # Code generated by WCA@IBM in this programming language is not approved for use in IBM product development.
    - name: Read json file
      ansible.builtin.slurp:
        src: "{{ playbook_dir }}/playbook_output/{{ item.name }}-MissingCriticalUpdatesReport.json"
      register: mfu_file_content
      delegate_to: localhost

    - name: Save content in a variable
      ansible.builtin.set_fact:
        mcu: "{{ mcu_file_content['content'] | b64decode | from_json }}"
        mfu: "{{ mfu_file_content['content'] | b64decode | from_json }}"

    - name: Get zosmf software instance detail
      ansible.builtin.uri:
        url: "https://{{ zmf_host }}/zosmf/swmgmt/swi/{{item.swiuuid}}"
        method: GET
        user: "{{ zmf_user | trim }}"
        password: "{{ zmf_password | trim }}"
        force_basic_auth: true
        headers:
          Host: "{{ zmf_host }}"
          Origin: "https://{{ zmf_host }}"
        status_code: "200"
        validate_certs: false
        return_content: true
      register: instance_data
      delegate_to: localhost

    - ansible.builtin.set_fact:
        info: "{{instance_data.content}}"

    - ansible.builtin.set_fact:
        new_swi: "{{ item | default({}) | combine ({
          'info': info,
          'mcu': mcu,
          'mfu': mfu,
          'csi_ds': csi_info
          }) }}"

    - ansible.builtin.set_fact:
        swilist: '{{ swilist | default([]) + [new_swi] }}'

    - name: Update collated SWI
      ansible.builtin.set_fact:
        collated_swi: "{{ collated_swi | default({}) | combine ({
                'swilist': new_swi
                }) }}"
