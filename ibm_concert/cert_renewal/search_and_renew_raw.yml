###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################

- hosts: all
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    cert_label: 'ANDY SITE' # must be 8 char or less
    cert_type: 'SITE'  # USER or SITE or CERTAUTH
    sign_with: 'CERTAUTH' # blank or CERTAUTH
    sign_label: 'ANDY CA'
    owner_id: 'OMVSKERN'
    keyring_name: 'SharedRing1'

    # cert_label: 'ANDY SSL' # must be 8 char or less
    # cert_type: 'USER'  # USER or SITE or CERTAUTH
    # sign_with: 'CERTAUTH' # blank or CERTAUTH
    # sign_label: 'ANDY CA'
    # owner_id: 'OMVSADM'
    # keyring_name: 'WEBSSL'

    cert_found: false
    today: ''

  tasks:
    - name: Create temporary directory to store bank files
      tempfile:
        state: directory
      register: playbook_tmp_dir

    - block:
        - include_role:
            name: issue_operator_cmd
          vars:
            task_description: 'Run Health Checker'
            command: "F HZSPROC,RUN,CHECK=(IBMRACF,RACF_CERTIFICATE_EXPIRATION)"

        - include_role:
            name: print_hc_buffer
          vars:
            hc_check: 'IBMRACF,RACF_CERTIFICATE_EXPIRATION'

        - name: search for {{cert_label}} in report
          set_fact:
            cert_found: true
          with_items: "{{hc_job_output.jobs.0.ddnames}}"
          when: item.content is search(cert_label)

        - debug: msg="{{cert_label}} expiring - {{cert_found}}"

        - command: "date '+%b%d%y'"
          register: date_result
          when: cert_found

        - set_fact:
            today: "{{ date_result.stdout }}"
          when: cert_found

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Back up current certificate'
            command:
              - >
                  RACDCERT EXPORT(LABEL('{{cert_label}}')) +
                      DSN('{{ ansible_user }}.CERT.{{cert_type}}.BACKUP.{{today}}')
              - >
                  RACDCERT CHECKCERT('{{ ansible_user }}.CERT.{{cert_type}}.BACKUP.{{today}}')
          when: cert_found and not cert_type == 'USER'

        - include_role:

            name: issue_racf_cmd
          vars:
            task_description: 'Back up current certificate'
            command:
              - >
                  RACDCERT EXPORT(LABEL('{{cert_label}}')) ID({{owner_id}}) +
                      DSN('{{ ansible_user }}.CERT.{{cert_type}}.BACKUP.{{today}}')
              - >
                  RACDCERT CHECKCERT('{{ ansible_user }}.CERT.{{cert_type}}.BACKUP.{{today}}') +
                      ID({{owner_id}})
          when: cert_found and cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Rekey and Generate new cert request for {{cert_type}}'
            command:
              - >
                  RACDCERT {{cert_type}} REKEY(LABEL('{{cert_label}}')) +
                     WITHLABEL('{{cert_label}}-NEW')
              - >
                  RACDCERT {{cert_type}} LIST(LABEL('{{cert_label}}-NEW'))
              - >
                  RACDCERT {{cert_type}} GENREQ (LABEL('{{cert_label}}-NEW')) +
                    DSN('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}')
              - >
                  RACDCERT {{cert_type}} DELETE(LABEL('{{ cert_label }}'))
          when: cert_found and not cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Rekey and Generate new cert request for {{cert_type}}'
            command:
              - >
                  RACDCERT REKEY(LABEL('{{cert_label}}')) +
                     WITHLABEL('{{cert_label}}-NEW') ID({{ owner_id}})
              - >
                  RACDCERT ID({{ owner_id }}) LIST(LABEL('{{cert_label}}-NEW'))
              - >
                  RACDCERT GENREQ (LABEL('{{cert_label}}-NEW')) +
                    ID({{owner_id}}) +
                    DSN('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}')
              - >
                  RACDCERT ID({{owner_id}}) DELETE(LABEL('{{ cert_label }}'))
          when: cert_found and cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Install and connect local cert for {{cert_type}}'
            command:
              - >
                  RACDCERT {{cert_type}} +
                     GENCERT('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}') +
                     SIGNWITH({{sign_with}} LABEL('{{sign_label}}'))
              - >
                  RACDCERT {{cert_type}} ALTER(LABEL('{{ cert_label}}-NEW')) +
                     NEWLABEL('{{ cert_label}}')
              - >
                  RACDCERT ID({{owner_id}}) +
                     CONNECT(LABEL('{{cert_label}}') +
                     RING({{keyring_name}}) DEFAULT USAGE(PERSONAL))
          when: cert_found and not sign_label == ' ' and not cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Install and connect local cert for {{cert_type}}'
            command:
              - >
                  RACDCERT ID({{owner_id}}) +
                     GENCERT('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}') +
                     SIGNWITH({{sign_with}} LABEL('{{sign_label}}'))
              - >
                  RACDCERT ID({{ owner_id}}) ALTER(LABEL('{{ cert_label}}-NEW')) +
                     NEWLABEL('{{ cert_label}}')
              - >
                  RACDCERT ID({{owner_id}}) +
                     CONNECT(LABEL('{{cert_label}}') +
                     RING({{keyring_name}}) DEFAULT USAGE(PERSONAL))
          when: cert_found and not sign_label == ' ' and cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Install and connect self-signed cert for {{cert_type}}'
            command:
              - >
                  RACDCERT {{cert_type}} +
                     GENCERT('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}') +
                     SIGNWITH({{sign_with}} LABEL('{{cert_label}}NEW'))
              - >
                  RACDCERT {{cert_type}} ALTER(LABEL('{{ cert_label}}-NEW')) +
                     NEWLABEL('{{ cert_label}}')
              - >
                  RACDCERT ID({{owner_id}}) +
                     CONNECT(LABEL('{{cert_label}}') +
                     RING({{keyring_name}}) DEFAULT USAGE(PERSONAL))
          when: cert_found and sign_label == ' ' and not cert_type == 'USER'

        - include_role:
            name: issue_racf_cmd
          vars:
            task_description: 'Install and connect self-signed cert for {{cert_type}}'
            command:
              - >
                  RACDCERT ID({{owner_id}}) +
                     GENCERT('{{ ansible_user }}.CSR.{{cert_type}}.{{today}}') +
                     SIGNWITH({{sign_with}} LABEL('{{cert_label}}NEW'))
              - >
                  RACDCERT ID({{ owner_id}}) ALTER(LABEL('{{ cert_label}}-NEW')) +
                     NEWLABEL('{{ cert_label}}')
              - >
                  RACDCERT ID({{owner_id}}) +
                     CONNECT(LABEL('{{cert_label}}') +
                     RING({{keyring_name}}) DEFAULT USAGE(PERSONAL))
          when: cert_found and sign_label == ' ' and cert_type == 'USER'

        - include_role:
            name: issue_operator_cmd
          vars:
            task_description: 'Run Health Check'
            command: "F HZSPROC,RUN,CHECK=(IBMRACF,RACF_CERTIFICATE_EXPIRATION)"
          when: cert_found

      always:
        - name: Delete the temporary directory
          file:
            path: "{{ playbook_tmp_dir.path }}"
            state: absent
      vars:
        uss_file_path: '{{ playbook_tmp_dir.path }}'
