###############################################################################
# Copyright (c) IBM Corporation 2021
###############################################################################

###############################################################################
# This sample playbook demonstrates using various Ansible modules included in
# the Red Hat Ansible Certified Content for IBM Z core collection.
#
#  Each module has options available on how automation can be
#  controlled. This sample does not demonstrate all options; refer to
#  the documentation or use ansible-doc to learn more about those options.
#  https://ibm.github.io/z_ansible_collections_doc/index.html
#
#  When running this playbook, review the comments on how this sample
#  interacts with your target. Ensure that you have the required authority and
#  permissions such submitting a job to z/OS.
#
# This sample focuses on processing job submission responses using a number
# of constructs such as `when`, `with_sequence`, `loop`, `set_fact`, `debug`,
# `tags`, etc, all available as part of the Ansible engine.
#
# Because this sample is aimed at helping users become familiar with the various
# Ansible constructs, it includes a response from a submitted job in both JSON
# and YAML format (both equally the same) such that you can develop against
# the JSON/YAML responses to avoid having to submit a job for every playbook
# edit. Optionally the playbook can be run in production mode where the playbook
# will need to connect to an actual z/OS host (`hosts`) and the playbook task
# `zos_job_submit` must have JCL it can submit.
#
# This sample relies on the usage of tags which aid in which tasks should be
# executed thus controlling the flow and modes of operation. The tags supported
# are:
#   - mode_development_json - run playbook with a JSON pre-defined job response
#   - mode_development_yaml - run playbook with a YAML pre-defined job response
#   - mode_production       - run playbook on a z/OS target over SSH
#   - mode_verbose          - run playbook with added verbosity
#
# Usage:
#  ansible-playbook -i <inventory> <playbook> --tags "....."
#
#   1) Run in development mode using JSON cached input
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_development_json"
#   2) Run in development mode using YAML cached input
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_development_yaml"
#   3) Run in development mode using JSON cached input with verbose
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_development_json,mode_verbose"
#   4) Run in development mode using YAML cached input with verbose
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_development_yaml,mode_verbose"
#   5) Run in production mode on z/OS target
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_production"
#   6) Run in production mode on z/OS target with verbose
#         ansible-playbook -i inventories zos_job_submit_ansible_constructs.yaml --tags "mode_production,mode_verbose"
#
# Requirements:
#   1) IBM® z/OS® core collection 1.2.0 or later
#   2) Ansible 2.11 or later
#   3) jmespath (`pip install jmespath`)
#
# Notes:
#   * If you do not run with Ansible 2.11 or later, you will encounter an
#     error similar to this:
#       "Invalid data passed to 'loop', it requires a list, got this
#        instead: {{ submit_job_list | community.general.json_query('ddnames[*].ddname') }}.
#        Hint: If you passed a list/dict of just one element, try adding wantlist=True
#        to your lookup invocation or use q/query instead of lookup."}""
#   * If you do not install `jmespath` you will encounter an error on tasks that
#     use `json_query` (community.general.json_query) similar to this:
#       "You need to install \"jmespath\" prior to running json_query filter"}"
#
# Documentation and further reading:
#   Review the release notes for the collection version dependencies here:
#     https://ibm.github.io/z_ansible_collections_doc/ibm_zos_core/docs/source/release_notes.html
#   Install `jmespath`
#     https://pypi.org/project/jmespath/
#
###############################################################################

---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  environment: "{{ environment_vars }}"
  vars:
    ############################################################################
    # YAML representation of the zos_job_submit response used for development to
    # simulate a job submission used to expedite development. Allows for
    # playbook development to be done without actually submitting jobs when
    # --tags "mode_development_yaml"
    ############################################################################
    job_sub_result_yaml:
      changed: true
      checksum: ef07e1151def179cb683351dd0c7122d14c4b7ee
      dest: /tmp/ansible.al8h8j5g
      duration: 0
      failed: false
      gid: 1
      group: OMVSGRP
      jobs:
        - class: A
          content_type: JOB
          ddnames:
            - byte_count: '754'
              content:
                - >-
                  1                       J E S 2  J O B  L O G  --  S Y S T E M  S T
                  L 1  --  N O D E  S T L 1            
                - '0 '
                - ' 16.29.01 JOB00260 ---- THURSDAY,  13 MAY 2021 ----'
                - ' 16.29.01 JOB00260  IRR010I  USERID OMVSADM  IS ASSIGNED TO THIS JOB.'
                - ' 16.29.01 JOB00260  $HASP375 JES2     ESTIMATED  LINES EXCEEDED'
                - ' 16.29.01 JOB00260  ICH70001I OMVSADM  LAST ACCESS AT 16:28:55 ON THURSDAY, MAY 13, 2021'
                - ' 16.29.01 JOB00260  $HASP375 HELLO    ESTIMATED  LINES EXCEEDED'
                - ' 16.29.01 JOB00260  $HASP373 HELLO    STARTED - INIT 8    - CLASS A        - SYS STL1'
                - ' 16.29.01 JOB00260  SMF000I  HELLO       STEP0001    IEBGENER    0000'
                - ' 16.29.01 JOB00260  $HASP395 HELLO    ENDED - RC=0000'
                - 0------ JES2 JOB STATISTICS ------
                - '-  13 MAY 2021 JOB EXECUTION DATE'
                - '-           16 CARDS READ'
                - '-           62 SYSOUT PRINT RECORDS'
                - '-            0 SYSOUT PUNCH RECORDS'
                - '-            7 SYSOUT SPOOL KBYTES'
                - '-         0.00 MINUTES EXECUTION TIME'
              ddname: JESMSGLG
              id: '2'
              procstep: ''
              record_count: '17'
              stepname: JES2
            - byte_count: '696'
              content:
                - '         1 //HELLO    JOB (T043JM,JM00,1,0,0,0),''HELLO WORLD - JRM'',               JOB00260'
                - '           //             MSGCLASS=X,MSGLEVEL=1,NOTIFY=&SYSUID                             '
                - '           //*                                                                             '
                - '           //* PRINT "HELLO WORLD" ON JOB OUTPUT                                           '
                - '           //*                                                                             '
                - '           //* NOTE THAT THE EXCLAMATION POINT IS INVALID EBCDIC FOR JCL                   '
                - '           //*   AND WILL CAUSE A JCL ERROR                                                '
                - '           //*                                                                             '
                - '           IEFC653I SUBSTITUTION JCL - (T043JM,JM00,1,0,0,0),''HELLO WORLD - JRM'',MSGCLASS=X,MSGLEVEL=1,NOTIFY=OMVSADM'
                - '         2 //STEP0001 EXEC PGM=IEBGENER                                                    '
                - '         3 //SYSIN    DD DUMMY                                                             '
                - '         4 //SYSPRINT DD SYSOUT=*                                                          '
                - '         5 //SYSUT1   DD *                                                                 '
                - '         6 //SYSUT2   DD SYSOUT=*                                                          '
                - '         7 //                                                                              '
              ddname: JESJCL
              id: '3'
              procstep: ''
              record_count: '15'
              stepname: JES2
            - byte_count: '1191'
              content:
                - ' ICH70001I OMVSADM  LAST ACCESS AT 16:28:55 ON THURSDAY, MAY 13, 2021'
                - ' IEFA111I HELLO IS USING THE FOLLOWING JOB RELATED SETTINGS:'
                - '          SWA=BELOW,TIOT SIZE=32K,DSENQSHR=DISALLOW,GDGBIAS=JOB'
                - ' IEF236I ALLOC. FOR HELLO STEP0001'
                - ' IEF237I DMY  ALLOCATED TO SYSIN'
                - ' IEF237I JES2 ALLOCATED TO SYSPRINT'
                - ' IEF237I JES2 ALLOCATED TO SYSUT1'
                - ' IEF237I JES2 ALLOCATED TO SYSUT2'
                - ' IEF142I HELLO STEP0001 - STEP WAS EXECUTED - COND CODE 0000'
                - ' IEF285I   OMVSADM.HELLO.JOB00260.D0000102.?            SYSOUT        '
                - ' IEF285I   OMVSADM.HELLO.JOB00260.D0000101.?            SYSIN         '
                - ' IEF285I   OMVSADM.HELLO.JOB00260.D0000103.?            SYSOUT        '
                - ' IEF373I STEP/STEP0001/START 2021133.1629'
                - ' IEF032I STEP/STEP0001/STOP  2021133.1629 '
                - '         CPU:     0 HR  00 MIN  00.00 SEC    SRB:     0 HR  00 MIN  00.00 SEC    '
                - '         VIRT:    60K  SYS:   240K  EXT:        0K  SYS:    12088K'
                - '         ATB- REAL:                  1032K  SLOTS:                     0K'
                - '              VIRT- ALLOC:      11M SHRD:       0M'
                - ' IEF375I  JOB/HELLO   /START 2021133.1629'
                - ' IEF033I  JOB/HELLO   /STOP  2021133.1629 '
                - '         CPU:     0 HR  00 MIN  00.00 SEC    SRB:     0 HR  00 MIN  00.00 SEC    '
              ddname: JESYSMSG
              id: '4'
              procstep: ''
              record_count: '21'
              stepname: JES2
            - byte_count: '251'
              content:
                - >-
                  1DATA SET UTILITY -
                  GENERATE                                                                      
                  PAGE 0001             
                - >-
                  -IEB352I WARNING: ONE OR MORE OF THE OUTPUT DCB PARMS COPIED FROM
                  INPUT                                                  
                - '                                                                                                                         '
                - ' PROCESSING ENDED AT EOD                                                                                                 '
              ddname: SYSPRINT
              id: '102'
              procstep: ''
              record_count: '4'
              stepname: STEP0001
            - byte_count: '49'
              content:
                - ' HELLO, WORLD                                                                    '
              ddname: SYSUT2
              id: '103'
              procstep: ''
              record_count: '1'
              stepname: STEP0001
          job_id: JOB00260
          job_name: HELLO
          owner: ''
          ret_code:
            code: 0
            msg: CC 0000
            msg_code: '0000'
            msg_txt: ''
          subsystem: STL1
          system: EC33017A
      md5sum: 20fc2b12e91816da0d468f50a661be46
      message:
        stdout: Submit JCL operation succeeded.
      mode: '0600'
      owner: BPXROOT
      size: 999
      src: /.ansible/tmp/ansible-tmp-1620948522.73-165550739847134/source
      state: file
      uid: 0


    ############################################################################
    # JSON representation of the zos_job_submit response used for development to
    # simulate a job submission used to expedite development. Allows for
    # playbook development to be done without actually submitting jobs when
    # --tags "mode_development_json"
    ############################################################################
    job_sub_result_json:
      {
      "changed":true,
      "checksum":"ef07e1151def179cb683351dd0c7122d14c4b7ee",
      "dest":"/tmp/ansible.al8h8j5g",
      "duration":0,
      "failed":false,
      "gid":1,
      "group":"OMVSGRP",
      "jobs":[
          {
            "class":"A",
            "content_type":"JOB",
            "ddnames":[
                {
                  "byte_count":"754",
                  "content":[
                      "1                       J E S 2  J O B  L O G  --  S Y S T E M  S T L 1  --  N O D E  S T L 1            ",
                      "0 ",
                      " 16.29.01 JOB00260 ---- THURSDAY,  13 MAY 2021 ----",
                      " 16.29.01 JOB00260  IRR010I  USERID OMVSADM  IS ASSIGNED TO THIS JOB.",
                      " 16.29.01 JOB00260  $HASP375 JES2     ESTIMATED  LINES EXCEEDED",
                      " 16.29.01 JOB00260  ICH70001I OMVSADM  LAST ACCESS AT 16:28:55 ON THURSDAY, MAY 13, 2021",
                      " 16.29.01 JOB00260  $HASP375 HELLO    ESTIMATED  LINES EXCEEDED",
                      " 16.29.01 JOB00260  $HASP373 HELLO    STARTED - INIT 8    - CLASS A        - SYS STL1",
                      " 16.29.01 JOB00260  SMF000I  HELLO       STEP0001    IEBGENER    0000",
                      " 16.29.01 JOB00260  $HASP395 HELLO    ENDED - RC=0000",
                      "0------ JES2 JOB STATISTICS ------",
                      "-  13 MAY 2021 JOB EXECUTION DATE",
                      "-           16 CARDS READ",
                      "-           62 SYSOUT PRINT RECORDS",
                      "-            0 SYSOUT PUNCH RECORDS",
                      "-            7 SYSOUT SPOOL KBYTES",
                      "-         0.00 MINUTES EXECUTION TIME"
                  ],
                  "ddname":"JESMSGLG",
                  "id":"2",
                  "procstep":"",
                  "record_count":"17",
                  "stepname":"JES2"
                },
                {
                  "byte_count":"696",
                  "content":[
                      "         1 //HELLO    JOB (T043JM,JM00,1,0,0,0),'HELLO WORLD - JRM',               JOB00260",
                      "           //             MSGCLASS=X,MSGLEVEL=1,NOTIFY=&SYSUID                             ",
                      "           //*                                                                             ",
                      "           //* PRINT \"HELLO WORLD\" ON JOB OUTPUT                                           ",
                      "           //*                                                                             ",
                      "           //* NOTE THAT THE EXCLAMATION POINT IS INVALID EBCDIC FOR JCL                   ",
                      "           //*   AND WILL CAUSE A JCL ERROR                                                ",
                      "           //*                                                                             ",
                      "           IEFC653I SUBSTITUTION JCL - (T043JM,JM00,1,0,0,0),'HELLO WORLD - JRM',MSGCLASS=X,MSGLEVEL=1,NOTIFY=OMVSADM",
                      "         2 //STEP0001 EXEC PGM=IEBGENER                                                    ",
                      "         3 //SYSIN    DD DUMMY                                                             ",
                      "         4 //SYSPRINT DD SYSOUT=*                                                          ",
                      "         5 //SYSUT1   DD *                                                                 ",
                      "         6 //SYSUT2   DD SYSOUT=*                                                          ",
                      "         7 //                                                                              "
                  ],
                  "ddname":"JESJCL",
                  "id":"3",
                  "procstep":"",
                  "record_count":"15",
                  "stepname":"JES2"
                },
                {
                  "byte_count":"1191",
                  "content":[
                      " ICH70001I OMVSADM  LAST ACCESS AT 16:28:55 ON THURSDAY, MAY 13, 2021",
                      " IEFA111I HELLO IS USING THE FOLLOWING JOB RELATED SETTINGS:",
                      "          SWA=BELOW,TIOT SIZE=32K,DSENQSHR=DISALLOW,GDGBIAS=JOB",
                      " IEF236I ALLOC. FOR HELLO STEP0001",
                      " IEF237I DMY  ALLOCATED TO SYSIN",
                      " IEF237I JES2 ALLOCATED TO SYSPRINT",
                      " IEF237I JES2 ALLOCATED TO SYSUT1",
                      " IEF237I JES2 ALLOCATED TO SYSUT2",
                      " IEF142I HELLO STEP0001 - STEP WAS EXECUTED - COND CODE 0000",
                      " IEF285I   OMVSADM.HELLO.JOB00260.D0000102.?            SYSOUT        ",
                      " IEF285I   OMVSADM.HELLO.JOB00260.D0000101.?            SYSIN         ",
                      " IEF285I   OMVSADM.HELLO.JOB00260.D0000103.?            SYSOUT        ",
                      " IEF373I STEP/STEP0001/START 2021133.1629",
                      " IEF032I STEP/STEP0001/STOP  2021133.1629 ",
                      "         CPU:     0 HR  00 MIN  00.00 SEC    SRB:     0 HR  00 MIN  00.00 SEC    ",
                      "         VIRT:    60K  SYS:   240K  EXT:        0K  SYS:    12088K",
                      "         ATB- REAL:                  1032K  SLOTS:                     0K",
                      "              VIRT- ALLOC:      11M SHRD:       0M",
                      " IEF375I  JOB/HELLO   /START 2021133.1629",
                      " IEF033I  JOB/HELLO   /STOP  2021133.1629 ",
                      "         CPU:     0 HR  00 MIN  00.00 SEC    SRB:     0 HR  00 MIN  00.00 SEC    "
                  ],
                  "ddname":"JESYSMSG",
                  "id":"4",
                  "procstep":"",
                  "record_count":"21",
                  "stepname":"JES2"
                },
                {
                  "byte_count":"251",
                  "content":[
                      "1DATA SET UTILITY - GENERATE                                                                       PAGE 0001             ",
                      "-IEB352I WARNING: ONE OR MORE OF THE OUTPUT DCB PARMS COPIED FROM INPUT                                                  ",
                      "                                                                                                                         ",
                      " PROCESSING ENDED AT EOD                                                                                                 "
                  ],
                  "ddname":"SYSPRINT",
                  "id":"102",
                  "procstep":"",
                  "record_count":"4",
                  "stepname":"STEP0001"
                },
                {
                  "byte_count":"49",
                  "content":[
                      " HELLO, WORLD                                                                    "
                  ],
                  "ddname":"SYSUT2",
                  "id":"103",
                  "procstep":"",
                  "record_count":"1",
                  "stepname":"STEP0001"
                }
            ],
            "job_id":"JOB00260",
            "job_name":"HELLO",
            "owner":"",
            "ret_code":{
                "code":0,
                "msg": "CC 0000",
                "msg_code": "0000",
                "msg_txt":""
            },
            "subsystem":"STL1",
            "system":"EC33017A"
          }
      ],
      "md5sum":"20fc2b12e91816da0d468f50a661be46",
      "message":{
          "stdout":"Submit JCL operation succeeded."
      },
      "mode":"0600",
      "owner":"BPXROOT",
      "size":999,
      "src":"/.ansible/tmp/ansible-tmp-1620948522.73-165550739847134/source",
      "state":"file",
      "uid":0
    }

  tasks:
    ############################################################################
    # Submit a job when --tags "mode_production"
    ############################################################################
    - name: Convert a local JCL file to IBM-037 and submit the job
      zos_job_submit:
        src: "{{playbook_dir}}/files/HELLO.jcl"
        location: LOCAL
        wait: false
        encoding:
          from: ISO8859-1
          to: IBM-037
      register: job_sub_result_production
      tags: mode_production

    ############################################################################
    # Set facts used in this playbook depending on the --tags used:
    #  * submit_job_name - Job name extracted from the job submit result
    #  * submit_job_id - Job ID extracted from the job submit result
    #  * submit_jobs_ddnames_length - Job DD's list length extracted from the job submit result
    #  * submit_job_ddnames_list - Job DD's list extracted from the job submit result
    #  * submit_job_list -  Jobs list (currently always size of 1)
    ############################################################################

    - name: Set fact `job_sub_result` with live production content
      set_fact:
        job_sub_result: "{{job_sub_result_production}}"
      tags: mode_production

    - name: Set fact `job_sub_result` with static YAML content used in development mode
      set_fact:
        job_sub_result: "{{job_sub_result_yaml}}"
      tags: mode_development_yaml

    - name: Set fact `job_sub_result` with static JSON content used in development mode
      set_fact:
        job_sub_result: "{{job_sub_result_json}}"
      tags: mode_development_json

    - name: Set facts used in this playbook
      set_fact:
        submit_job_name: "{{ job_sub_result.jobs[0].job_name }}"
        submit_job_id: "{{ job_sub_result.jobs[0].job_id }}"
        submit_jobs_ddnames_length: "{{ job_sub_result.jobs[0].ddnames |length }}"
        submit_job_ddnames_list: "{{ job_sub_result.jobs[0].ddnames }}"
        submit_job_list: "{{ job_sub_result.jobs[0] }}"
      tags: always

    - name: Fact values used in this playbook
      debug:
        msg:
          - Job name={{submit_job_name}}
          - Job ID={{submit_job_id}}
          - DD Count={{submit_jobs_ddnames_length}}
          - "{{submit_job_ddnames_list}}"
          - "{{submit_job_list}}"
      tags: mode_verbose

    ############################################################################
    # Get job output by job id when a job is submitted to z/OS when
    # --tags "mode_production"
    ############################################################################
    - name: Get job output for job ID {{submit_job_id}}
      zos_job_output:
        job_id: "{{submit_job_id}}"
      register: job_output_result
      when: job_sub_result_production is defined and job_sub_result_production
      tags: always

    - name: Result for get job output for job ID {{submit_job_id}}
      debug:
        msg: "{{ job_output_result }}"
      when: job_sub_result_production is defined and job_sub_result_production
      tags: always

    ############################################################################
    # Query job by job id when when a job is submitted to z/OS when
    # --tags "mode_production"
    ############################################################################
    - name: Query the submitted job ID {{submit_job_id}}
      zos_job_query:
        job_id: "{{submit_job_id}}"
      register: job_query_result
      when: job_sub_result_production is defined and job_sub_result_production
      tags: always

    - name: Result for query job ID {{submit_job_id}}
      debug:
        msg: "{{ job_query_result }}"
      when: job_sub_result_production is defined and job_sub_result_production
      tags: always

    ############################################################################
    # Traverse the submitted job to extract ddnames by using the Ansible
    # construct `with_sequence`
    ############################################################################
    - name: Traverse all DDs from submitted job {{submit_job_name}} using hard coded count with registered variable `job_sub_result`
      debug:
        msg:
          - "{{ job_sub_result.jobs[0].ddnames[item |int].ddname }}"
      with_sequence: count=4
      tags: always

    - name: Traverse all DDs from submitted job {{submit_job_name}} using hard coded start and dynamic end `submit_jobs_ddnames_length` with fact `submit_job_ddnames_list`
      debug:
        msg: "{{ submit_job_ddnames_list[item |int].ddname }}"
      with_sequence: start=0 end="{{ submit_jobs_ddnames_length |int -1 }}"
      tags: always

    - name: Traverse all DDs from submitted job {{submit_job_name}} using dynamic `submit_jobs_ddnames_length` with fact `submit_job_ddnames_list`
      debug:
        msg: "{{ submit_job_ddnames_list[item |int].ddname }}"
      with_sequence: count="{{ submit_jobs_ddnames_length |int -1 }}"
      tags: always

    ############################################################################
    # Traverse the submitted job to extract ddnames by using the Ansible
    # construct `with_sequence` and print the
    # DD values ddname, id, record_count, stepname, byte_count.
    ############################################################################
    - name: Traverse all DDs from submitted job {{submit_job_name}} using dynamic `submit_jobs_ddnames_length` with fact `submit_job_ddnames_list` and print the DD stats (ddname, id, record_count, stepname, byte_count)
      debug:
        msg:
          - "{{ submit_job_ddnames_list[item |int].ddname }}"
          - "{{ submit_job_ddnames_list[item |int].id }}"
          - "{{ submit_job_ddnames_list[item |int].record_count }}"
          - "{{ submit_job_ddnames_list[item |int].stepname }}"
          - "{{ submit_job_ddnames_list[item |int].byte_count }}"
      with_sequence: count="{{ submit_jobs_ddnames_length |int -1 }}"
      tags: always

    ############################################################################
    # Traverse the submitted job to extract ddname and stepname by using the
    # Ansible construct `loop`
    ############################################################################
    - name: Traverse all DDs ddname(s) from submitted job {{submit_job_name}} using ansible `loop` with  fact `submit_job_ddnames_list`
      debug:
        msg: "{{ item.ddname }}"
      loop: "{{submit_job_ddnames_list}}"
      tags: always

    - name: Traverse all DDs stepname(s) from submitted job {{submit_job_name}} using ansible `loop` with set fact `submit_job_ddnames_list`
      debug:
        msg: "{{ item.stepname }}"
      loop: "{{submit_job_ddnames_list}}"
      tags: always

    ############################################################################
    # Traverse the submitted job to extract ddname and stepname by using
    # the Ansible construct  `loop` and `json_query`
    # Requirements:
    #  * Ansible 2.11 or later
    #  * jmespath be installed where the playbook is run
    #    * `pip install jmespath`
    ############################################################################

    - name: Traverse all DDs ddname(s) from submitted job {{submit_job_name}} using ansible `loop` and `json_query` with fact `submit_job_list`
      debug:
        msg: "{{item}}"
      # with_items: "{{ job_sub_result | community.general.json_query('jobs[*].ddnames[*].id') }}"
      loop: "{{ submit_job_list | community.general.json_query('ddnames[*].ddname') }}"
      tags: always

    - name: Traverse all DDs ddname(s) from submitted job {{submit_job_name}} using ansible `loop` and `json_query` with fact `job_sub_result`
      debug:
        msg: "{{item}}"
      #with_items: "{{ job_sub_result | community.general.json_query('jobs[0].ddnames[*].ddname') }}"
      loop: "{{ job_sub_result | community.general.json_query('jobs[0].ddnames[*].ddname') }}"
      tags: always

    ############################################################################
    # Traverse the submitted job to extract ddname and stepname by using
    # the Ansible construct  `with_items` and `json_query`
    # Requirements:
    #  * Ansible 2.11 or later
    #  * jmespath be installed where the playbook is run
    #    * `pip install jmespath`
    ############################################################################

    - name: Traverse all DDs ddname(s) from submitted job {{submit_job_name}} using ansible `with_items` and `json_query` with fact `submit_job_list`
      debug:
        msg: "{{item}}"
      with_items: "{{ submit_job_list | community.general.json_query('ddnames[*].ddname') }}"
      tags: always

    - name: Traverse all DDs ddname(s) from submitted job {{submit_job_name}} using ansible `with_items` and `json_query` with fact `job_sub_result`
      debug:
        msg: "{{item}}"
      with_items: "{{ job_sub_result | community.general.json_query('jobs[0].ddnames[*].ddname') }}"
      tags: always

    ############################################################################
    # Access the submitted job ret_code complex type, example:
    #  "ret_code": {
    #        "code": 0,
    #        "msg": "CC 0000",
    #        "msg_code": "0000",
    #        "msg_txt": ""
    #   },
    ############################################################################
    - name: Access the submitted job return code values
      debug:
        msg:
          - "{{ submit_job_list.ret_code.code}}"
          - "{{ submit_job_list.ret_code.msg}}"
          - "{{ submit_job_list.ret_code.msg_code}}"
          - "{{ submit_job_list.ret_code.msg_txt}}"
      tags: always
