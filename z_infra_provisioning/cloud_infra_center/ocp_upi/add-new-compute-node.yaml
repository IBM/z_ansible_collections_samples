# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2023 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================

# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk
# netaddr

- hosts: localhost
  gather_facts: false

  tasks:
    - name: 'Import common yaml'
      ansible.builtin.include_tasks: "{{ playbook_dir }}/common.yaml"

    - name: 'Get image name for kvm'
      ansible.builtin.set_fact:
        image_name: icic_rhcos_qcow2
      when:
        - vm_type == "kvm"

    - name: 'Get image name for ZVM'
      ansible.builtin.set_fact:
        image_name: "icic_rhcos_{{ disk_type }}"
      when:
        - vm_type == "zvm"

    - name: 'Export infra ID'
      ansible.builtin.shell:
        cmd: "jq -r .infraID metadata.json"
      register: infra_id

    - name: 'Set new worker properties'
      ansible.builtin.set_fact:
        add_worker_number: "{{ worker_number | default(1) }}"
        add_worker_ip: "{{ ip | default('random') }}"
        new_worker_file: "/tmp/{{ infra_id.stdout }}-new-worker"

    - name: Check if worker count is matched the ip address
      ansible.builtin.fail:
        msg: "worker ip does not match the worker number"
      failed_when:
        - add_worker_ip != "random"
        - "{{ add_worker_ip.split(',') | length }} != {{ add_worker_number | int }}"

    - name: 'Generate new worker name'
      ansible.builtin.shell: |
        rm -rf {{ new_worker_file }}
        shuf -i 1000-9999 -n {{ add_worker_number }} -o {{ new_worker_file }}
        if [ "{{ add_worker_ip }}" != "random" ];then
          count=0
          multi=$(echo "{{ add_worker_ip }}" | tr -cd , | wc -c)
          if [[ $multi -ge 1 ]];then
            IFS=',' read -ra ip_ary <<< "{{ add_worker_ip }}"
            for i in "${!ip_ary[@]}"; do
                if [ $i == $count ];then
                    sed -i -e "$((i+1)) s/$/ ${ip_ary[$i]}/" {{ new_worker_file }}
                fi
                ((count++))
            done
          else
            sed -i -e 's/$/ {{ add_worker_ip }}/' {{ new_worker_file }}
          fi
        else
          sed -i -e 's/$/ random/' {{ new_worker_file }}
        fi

    - name: 'Get new worker list'
      ansible.builtin.command:
        cmd: cat {{ new_worker_file }}
      register: new_worker_list

    - name: 'Generate worker node json file'
      ansible.builtin.script: tools/generate-new-worker-ignition.sh "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
      with_items: "{{ new_worker_list.stdout_lines }}"

    - name: 'Create the compute server ports'
      openstack.cloud.port:
        name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        network: "{{ use_network_name }}"
        security_groups:
          - "{{ os_sg_worker }}"
        fixed_ips:
          - subnet: "{{ use_network_subnet }}"
            ip_address: "{{ item.split(' ')[1] }}"
      register: ports
      with_items: "{{ new_worker_list.stdout_lines }}"
      when: add_worker_ip != "random"

    - name: 'Create the compute server ports'
      openstack.cloud.port:
        name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        network: "{{ use_network_name }}"
        security_groups:
          - "{{ os_sg_worker }}"
      register: ports
      with_items: "{{ new_worker_list.stdout_lines }}"
      when: add_worker_ip == "random"

    - name: 'Set compute server ports tag'
      ansible.builtin.command:
        cmd: "openstack port set --tag {{ cluster_id_tag }} {{ os_port_worker }}-{{ item.split(' ')[0] }}"
      with_items: "{{ new_worker_list.stdout_lines }}"

    - name: 'Create the compute servers'
      openstack.cloud.server:
        name: "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ os_compute_server_name, item.split(' ')[0] , 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        meta: "{{ cluster_id_tag }}"
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - vm_type == "kvm"
        - volume_type_id is not defined

    - name: 'Create the compute servers'
      openstack.cloud.server:
        name: "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ os_compute_server_name, item.split(' ')[0], 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - disk_type == "dasd"
        - vm_type == "zvm"
        - volume_type_id is not defined

    - name: 'Convert compute server flavor from value into number'
      ansible.builtin.command:
        cmd: "openstack flavor show {{ os_flavor_worker }} -c disk -f value"
      register: compute_flavor_size
      when:
        - disk_type == "scsi"

    - name: 'Create the compute servers with default boot volume'
      openstack.cloud.server:
        name: "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ os_compute_server_name, item.split(' ')[0] , 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        boot_from_volume: true
        volume_size: "{{ compute_flavor_size.stdout_lines[0]}}"
        terminate_volume: true
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - vm_type == "zvm"
        - volume_type_id is not defined

    - name: 'Create compute boot volume'
      openstack.cloud.volume:
        state: present
        name: "{{ item }}-boot"
        image: "{{ image_name }}"
        size: "{{ compute_flavor_size.stdout_lines[0]}}"
        volume_type: "{{ volume_type_id }}"
        metadata: "{{ cluster_id_tag }}"
        timeout: "{{ create_server_timeout|int * 60 }}"
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Set compute volume bootable'
      ansible.builtin.shell: openstack --os-volume-api-version=3 volume set --bootable "{{ item }}-boot"
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Create the compute server with boot volume'
      openstack.cloud.server:
        name: "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
        flavor: "{{ os_flavor_worker }}"
        boot_volume: "{{ item }}-boot"
        auto_ip: false
        availability_zone: "{{ create_server_zone }}"
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ os_compute_server_name, item.split(' ')[0] , 'ignition.json'] | join('-'))  | string }}"
        nics:
          - port-name: "{{ os_port_worker }}-{{ item.split(' ')[0] }}"
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
        terminate_volume: true
      with_items: "{{ new_worker_list.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Waiting for approve worker CSR'
      ansible.builtin.include_tasks: approve_worker.yaml
      vars:
        workerid: "{{ os_compute_server_name }}-{{ item.split(' ')[0] }}"
      register: worker_csr_sleeper
      with_items: "{{ new_worker_list.stdout_lines }}"

- import_playbook: configure-bastion-properties.yaml

- hosts: localhost
  tasks:
    - name: 'Get new worker name list'
      command: /usr/bin/python3
      args:
        stdin: |
          import yaml
          with open("cluster-template.yaml", "r") as stream:
              cluster = yaml.safe_load(stream)
          workers = cluster["cluster_nodes"]["infra"]
          print(workers)
      register: works_list_results

    - set_fact:
        workers_list: "{{ item.split(',') }}"
      with_items: "{{ works_list_results.stdout_lines }}"

- hosts: bastion
  tasks:
    - name: 'Check whether use internal bastion'
      set_fact:
        use_internal_bastion: "{{ hostvars['localhost']['use_internal_bastion'] }}"

    - name: 'Modify bastion dns for new worker'
      ansible.builtin.include_tasks: modify-dns.yaml
      vars:
        worker_name: "{{ item.split(':')[0] }}"
        worker_ip: "{{ item.split(':')[-1] }}"
        cluster_domain_name: "{{ hostvars['localhost']['cluster_name'] }}.{{ hostvars['localhost']['base_domain'] }}"
      with_items: "{{ hostvars['localhost']['workers_list'] }}" 
      when:
        - use_internal_bastion == true

    - name: 'Modify bastion haproxy for new worker'
      ansible.builtin.include_tasks: modify-haproxy.yaml
      vars:
        worker_name: "{{ item.split(':')[0] }}"
        cluster_domain_name:  "{{ hostvars['localhost']['cluster_name'] }}.{{ hostvars['localhost']['base_domain'] }}"
      with_items: "{{ hostvars['localhost']['workers_list'] }}" 
      when:
        - use_internal_bastion == true

    - name: Restart named-chroot.service
      ansible.builtin.service:
        name: named-chroot.service
        state: restarted
      when:
        - use_internal_bastion == true

    - name: Restart HAProxy.service
      ansible.builtin.service:
        name: haproxy.service
        state: restarted
      when:
        - use_internal_bastion == true

    - name: Check if named-chroot is running
      ansible.builtin.service:
        name: named-chroot
        state: started

    - name: Check if HAProxy is running
      ansible.builtin.service:
        name: haproxy
        state: started

