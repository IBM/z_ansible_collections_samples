# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================

# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk
# netaddr

- hosts: localhost
  gather_facts: no

  tasks:
  - name: 'Import common yaml'
    import_tasks: common.yaml

  - name: 'Export infra ID'
    shell:
      cmd: "jq -r .infraID metadata.json"
    register: infra_id

  - name: 'Get the created worker nodes name and store them in a file'
    shell: "./oc get nodes --kubeconfig auth/kubeconfig --no-headers | awk '{print$1}' | grep -w worker | grep -Po '.(?=.{0}$)' | sort -r | head -n1"
    register: latest_worker_index

  - name: 'Increment worker node index'
    set_fact: new_worker_index={{ latest_worker_index.stdout|int + 1 }}
  
  - name: Get existing node count
    shell: "cat .new_ocp_node.yml | grep total_count | awk -F '=' '{print $2}'"
    register: existing_node_count

  # - name: get new worker index
  #   debug:
  #     msg: "{{new_worker_index.stdout_lines}}"

  - name: 'Generate worker node json file'
    script: tools/generate-new-worker-ignition.sh {{ os_compute_server_name }}-{{ new_worker_index }}

  - name: 'Create the compute server ports'
    os_port:
      name: "{{ os_port_worker }}-{{ new_worker_index }}"
      network: "{{ use_network_name }}"
      security_groups:
      - "{{ os_sg_worker }}"
      fixed_ips:
      - subnet: "{{ use_network_subnet }}"
        ip_address: "{{ ip }}"
    register: ports
    when:
    - auto_allocated_ip == false

  - name: 'Create the compute server ports'
    os_port:
      name: "{{ os_port_worker }}-{{ new_worker_index }}"
      network: "{{ use_network_name }}"
      security_groups:
      - "{{ os_sg_worker }}"
    register: ports
    when:
    - auto_allocated_ip == true

  - name: 'Set compute server ports tag'
    command:
      cmd: "openstack port set --tag {{ cluster_id_tag }} {{ os_port_worker }}-{{ new_worker_index }}"

  - name: 'Create the compute servers'
    os_server:
      name: "{{ os_compute_server_name }}-{{ new_worker_index }}"
      image: "rhcos"
      flavor: "{{ os_flavor_worker }}"
      auto_ip: no
      timeout: "{{ create_server_timeout|int * 60 }}"
      userdata: "{{ lookup('file', [ os_compute_server_name , new_worker_index , 'ignition.json'] | join('-')) | string }}"
      availability_zone: "{{ create_server_zone }}"
      nics:
      - port-name: "{{ os_port_worker }}-{{ new_worker_index }}"
    when:
    - disk_type == "dasd"
  
  - name: 'Convert compute server flavor from value into number'
    command:
      cmd: "openstack flavor show {{ os_flavor_worker }} -c disk -f value"
    register: compute_flavor_size
    when:
    - disk_type == "scsi"

  - name: 'Create the compute servers with default boot volume'
    os_server:
      name: "{{ os_compute_server_name }}-{{ new_worker_index }}"
      image: "rhcos"
      flavor: "{{ os_flavor_worker }}"
      auto_ip: no
      timeout: "{{ create_server_timeout|int * 60 }}"
      userdata: "{{ lookup('file', [ os_compute_server_name , new_worker_index , 'ignition.json'] | join('-')) | string }}"
      availability_zone: "{{ create_server_zone }}"
      nics:
      - port-name: "{{ os_port_worker }}-{{ new_worker_index }}"
      boot_from_volume: True
      volume_size: "{{ compute_flavor_size.stdout_lines[0]}}"
      terminate_volume: True
    when:
    - disk_type == "scsi"
    - volume_type_id is not defined

  - name: 'Create compute boot volume'
    os_volume:
      state: present
      name: "{{ os_compute_server_name }}-{{ new_worker_index }}-boot"
      image: "rhcos"
      size: "{{ compute_flavor_size.stdout_lines[0]}}"
      volume_type: "{{ volume_type_id }}"
      metadata: "{{ cluster_id_tag }}"
      timeout: "{{ create_server_timeout|int * 60 }}" 
    when:
    - disk_type == "scsi"
    - volume_type_id is defined
  
  - name: 'Set compute volume bootable'
    shell: openstack volume set --bootable "{{ os_compute_server_name }}-{{ new_worker_index }}-boot"
    when: 
    - disk_type == "scsi"
    - volume_type_id is defined

  - name: 'Create the compute server with boot volume'
    os_server:
      name: "{{ os_compute_server_name }}-{{ new_worker_index }}"
      flavor: "{{ os_flavor_worker }}"
      boot_volume: "{{ os_compute_server_name }}-{{ new_worker_index }}-boot"
      auto_ip: no
      availability_zone: "{{ create_server_zone }}"
      timeout: "{{ create_server_timeout|int * 60 }}" 
      userdata: "{{ lookup('file', [ os_compute_server_name , new_worker_index , 'ignition.json'] | join('-')) | string }}"
      nics:
      - port-name: "{{ os_port_worker }}-{{ new_worker_index }}"
      meta: "{{ cluster_id_tag }}"
      terminate_volume: True
    when:
    - disk_type == "scsi"
    - volume_type_id is defined
  
  - name: Get new node IP
    environment:
      KUBECONFIG: "./auth/kubeconfig"
    shell: |
      openstack server list | grep {{ os_compute_server_name }}-{{ new_worker_index }} | grep -oP '(?<=)\d+(\.\d+){3}'
    register: new_worker_ip

  - name: 'Save new worker info into yaml'
    shell: |
      rm -rf .new_ocp_node.yml
      echo total_count={{ existing_node_count.stdout | int + 1 }} >> .new_ocp_node.yml
      echo cluster_domain_name={{ cluster_name }}.{{ base_domain }} >> .new_ocp_node.yml
      echo new_worker_index={{ new_worker_index }} >> .new_ocp_node.yml
      echo new_worker_ip={{ new_worker_ip.stdout }} >> .new_ocp_node.yml
    when: new_worker_ip is defined

- import_playbook: approve.yaml