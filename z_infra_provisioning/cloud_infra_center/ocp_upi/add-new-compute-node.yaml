# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================

# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk
# netaddr

- hosts: localhost
  gather_facts: false

  tasks:
    - name: 'Import common yaml'
      ansible.builtin.include_tasks: "{{ playbook_dir }}/common.yaml"

    - name: 'Get image name for kvm'
      ansible.builtin.set_fact:
        image_name: icic_rhcos_qcow2
      when:
        - vm_type == "kvm"

    - name: 'Get image name for ZVM'
      ansible.builtin.set_fact:
        image_name: "icic_rhcos_{{ disk_type }}"
      when:
        - vm_type == "zvm"

    - name: 'Export infra ID'
      ansible.builtin.shell:
        cmd: "jq -r .infraID metadata.json"
      register: infra_id

    - name: 'Get worker number'
      ansible.builtin.set_fact:
        add_worker_number: "{{ worker_number | default(1) }}"
        add_worker_ip: "{{ ip | default('random') }}"

    - name: 'Set worker ip'
      ansible.builtin.set_fact:
        add_worker_ip: "{{ ip.split(',') | default('random') }}"
      when: ip is defined

    - name: Check if worker number matches worker ip or not
      ansible.builtin.fail:
        msg: "worker ip does not match the worker number"
      failed_when:
        - add_worker_ip != "random"
        - "{{ add_worker_ip| length }} != {{ add_worker_number | int }}"

    - name: 'Generate worker index'
      ansible.builtin.shell: |
        rm -rf .new_worker_index
        shuf -i 1000-9999 -n {{ add_worker_number }} -o .new_worker_index
        sed -i -e 's/^/{{ os_compute_server_name }}-/' .new_worker_index
        sed -i -e 's/$/,ip=random/' .new_worker_index

    - name: Save worker name into temporary file
      ansible.builtin.shell: |
        rm -rf .new_worker_name
        cut -d"," -f1 .new_worker_index >> .new_worker_name

    - name: 'Add worker ip'
      ansible.builtin.shell: |
        sed -i '0,/random/s//{{ item }}/' .new_worker_index
      with_items:
        - "{{ add_worker_ip}}"
      when: add_worker_ip != "random"

    - name: 'Get new worker name'
      ansible.builtin.command:
        cmd: cat .new_worker_name
      register: new_worker_name_item

    - name: 'Get new worker index'
      ansible.builtin.command:
        cmd: cat .new_worker_index
      register: new_worker_index_item

    - name: 'Generate worker node json file'
      ansible.builtin.script: tools/generate-new-worker-ignition.sh "{{ item }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"

    - name: 'Create the compute server ports'
      openstack.cloud.port:
        name: "{{ item.split(',')[0] }}"
        network: "{{ use_network_name }}"
        security_groups:
          - "{{ os_sg_worker }}"
        fixed_ips:
          - subnet: "{{ use_network_subnet }}"
            ip_address: "{{ item.split(',')[1] | replace('ip=','') }}"
      register: ports
      with_items: "{{ new_worker_index_item.stdout_lines }}"
      when: add_worker_ip != "random"

    - name: 'Create the compute server ports'
      openstack.cloud.port:
        name: "{{ item }}"
        network: "{{ use_network_name }}"
        security_groups:
          - "{{ os_sg_worker }}"
      register: ports
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when: add_worker_ip == "random"

    - name: 'Set compute server ports tag'
      ansible.builtin.command:
        cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"

    - name: 'Create the compute servers'
      openstack.cloud.server:
        name: "{{ item }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ item , 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ item }}"
        meta: "{{ cluster_id_tag }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - vm_type == "kvm"
        - volume_type_id is not defined

    - name: 'Create the compute servers'
      openstack.cloud.server:
        name: "{{ item }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ item , 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ item }}"
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - disk_type == "dasd"
        - vm_type == "zvm"
        - volume_type_id is not defined

    - name: 'Convert compute server flavor from value into number'
      ansible.builtin.command:
        cmd: "openstack flavor show {{ os_flavor_worker }} -c disk -f value"
      register: compute_flavor_size
      when:
        - disk_type == "scsi"

    - name: 'Create the compute servers with default boot volume'
      openstack.cloud.server:
        name: "{{ item }}"
        image: "{{ image_name }}"
        flavor: "{{ os_flavor_worker }}"
        auto_ip: false
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ item , 'ignition.json'] | join('-'))  | string }}"
        availability_zone: "{{ create_server_zone }}"
        nics:
          - port-name: "{{ item }}"
        boot_from_volume: true
        volume_size: "{{ compute_flavor_size.stdout_lines[0]}}"
        terminate_volume: true
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - vm_type == "zvm"
        - volume_type_id is not defined

    - name: 'Create compute boot volume'
      openstack.cloud.volume:
        state: present
        name: "{{ item }}-boot"
        image: "{{ image_name }}"
        size: "{{ compute_flavor_size.stdout_lines[0]}}"
        volume_type: "{{ volume_type_id }}"
        metadata: "{{ cluster_id_tag }}"
        timeout: "{{ create_server_timeout|int * 60 }}"
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Set compute volume bootable'
      ansible.builtin.shell: openstack --os-volume-api-version=3 volume set --bootable "{{ item }}-boot"
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Create the compute server with boot volume'
      openstack.cloud.server:
        name: "{{ item }}"
        flavor: "{{ os_flavor_worker }}"
        boot_volume: "{{ item }}-boot"
        auto_ip: false
        availability_zone: "{{ create_server_zone }}"
        timeout: "{{ create_server_timeout|int * 60 }}"
        userdata: "{{ lookup('file', [ item , 'ignition.json'] | join('-'))  | string }}"
        nics:
          - port-name: "{{ item }}"
        meta: "{{ cluster_id_tag }},custom_dns={{ os_dns_domain }}"
        terminate_volume: true
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when:
        - disk_type == "scsi"
        - volume_type_id is defined

    - name: 'Update worker ip into new_worker_index file'
      ansible.builtin.shell: |
        worker_ip=$(openstack server list | grep "{{ item }}" | grep -oP "(?<=)\d+(\.\d+){3}")
        sed -i -e "/{{ item }}/s/random/$worker_ip/g" .new_worker_index
      with_items: "{{ new_worker_name_item.stdout_lines }}"
      when: add_worker_ip == "random"

    - name: 'Waiting for approve worker CSR'
      ansible.builtin.include_tasks: approve_worker.yaml
      vars:
        workerid: "{{ item }}"
      register: worker_csr_sleeper
      with_items: "{{ new_worker_name_item.stdout_lines }}"

- ansible.builtin.import_playbook: modify-bastion.yaml
  when:
    - update_bastion is defined
    - update_bastion == "true"
