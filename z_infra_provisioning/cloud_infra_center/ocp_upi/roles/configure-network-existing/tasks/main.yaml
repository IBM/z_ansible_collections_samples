# =================================================================
# Copyright 2021 https://github.com/openshift/installer
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =================================================================

# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================
#
# Change Summary: 
# - Add port creation
# - Delete unnecessary Ansible tasks
# - Use random strings to name compute ports

# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk

- name: 'Import common yaml'
  import_tasks: common.yaml

- name: 'Check existing netowrk name is properly set'
  fail:
    msg: "use_existing_network_name is not defined!"
  failed_when: use_existing_network_name is not defined

- name: 'Check existing netowrk subnet is properly set'
  fail:
    msg: "use_existing_network_subnet is not defined!"
  failed_when: use_existing_network_subnet is not defined

- name: 'Update subnet {{ use_existing_network_subnet }} DNS name server'
  command:
    cmd: "openstack subnet set --dns-nameserver {{ vars.os_dns_domain }} {{ use_existing_network_subnet }}"

- name: 'Update subnet {{ use_existing_network_subnet }} allocation pools'
  command:
    cmd: "openstack subnet set --allocation-pool start={{ allocation_pool_start }},end={{ allocation_pool_end }} {{ use_existing_network_subnet }}"
  when:
  - allocation_pool_start is defined
  - allocation_pool_end is defined 

- name: 'Export Infra ID'
  shell:
    cmd: "jq -r .infraID metadata.json"
  register: infra_id

- name: 'Generate random string for the Compute ports and store them in a json file'
  script: tools/generate-random-compute-json.py {{ infra_id.stdout_lines[0] }} {{ os_compute_nodes_number }}
  args:
    executable: python3

- name: 'Read compute nodes names'
  set_fact:
    compute_nodes_json: "{{ lookup('file', '.compute-nodes-{{ infra_id.stdout_lines[0] }}.json') | from_json }}"

- name: 'Create the bootstrap server port'
  os_port:
    name: "{{ os_port_bootstrap }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
    fixed_ips:
    - subnet: "{{ os_subnet }}"
      ip_address: "{{ os_bootstrap_ip }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the Control Plane ports'
  os_port:
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
    fixed_ips:
    - subnet: "{{ os_subnet }}"
      ip_address: "{{ os_master_ip[item.0] }}"
  with_indexed_items: "{{ [os_port_master] * os_cp_nodes_number }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the Compute ports'
  os_port:
    name: "{{ os_port_worker }}-{{ item.1 }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_worker }}"
    fixed_ips:
    - subnet: "{{ os_subnet }}"
      ip_address: "{{ os_infra_ip[item.0]}}"
  with_indexed_items: "{{ compute_nodes_json.compute_node_names }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the bootstrap server port'
  os_port:
    name: "{{ os_port_bootstrap }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
  when:
  - auto_allocated_ip == true


- name: 'Create the Control Plane ports'
  os_port:
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
  with_indexed_items: "{{ [os_port_master] * os_cp_nodes_number }}"
  when:
  - auto_allocated_ip == true

- name: 'Create the Compute ports'
  os_port:
    name: "{{ os_port_worker }}-{{ item.1 }}"
    network: "{{ use_existing_network_name }}"
    security_groups:
    - "{{ os_sg_worker }}"
  with_indexed_items: "{{ compute_nodes_json.compute_node_names }}"
  when:
  - auto_allocated_ip == true
    
- name: 'Set bootstrap port tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ os_port_bootstrap }}"

- name: 'Set Control Plane ports tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item.1 }}-{{ item.0 }}"
  with_indexed_items: "{{ [os_port_master] * os_cp_nodes_number }}"

- name: 'Set Compute ports tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ os_port_worker }}-{{ item.1 }}"
  with_indexed_items: "{{ compute_nodes_json.compute_node_names }}"