# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================

---
# tasks file for configure-pre-check

- name: Check DNS server connection
  ansible.builtin.shell: ping -c 1 -w 2 {{ os_dns_domain }}

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check if jq package is installed
  ansible.builtin.fail:
    msg: "jq package is not installed!"
  failed_when: "'jq' not in ansible_facts.packages"

- name: Check if tar package is installed
  ansible.builtin.fail:
    msg: "tar package is not installed!"
  failed_when: "'tar' not in ansible_facts.packages"

- name: Check if wget package is installed
  ansible.builtin.fail:
    msg: "wget package is not installed"
  failed_when: "'wget' not in ansible_facts.packages"

- name: Check if gzip package is installed
  ansible.builtin.fail:
    msg: "gzip package is not installed"
  failed_when: "'gzip' not in ansible_facts.packages"

- name: Get validate environment api url
  ansible.builtin.shell: openstack catalog show -f json validator | jq -r '.endpoints[] | "\(.url)"' | head -n 1
  register: validate_url

- name: Get icic token
  ansible.builtin.shell:
    cmd: openstack token issue -c id -f value
  register: icic_token
  failed_when: icic_token.stdout == ""

- name: 'Get Network physical_network'
  ansible.builtin.shell:
    cmd: "openstack network show -c provider:physical_network -f value {{ use_network_name }}"
  register: physical_network_out

- name: Set fact physical_network
  ansible.builtin.set_fact:
    physical_network: "{{ physical_network_out.stdout }}"

- name: Get validate subnet DNS
  ansible.builtin.shell: openstack subnet show -f shell {{ use_network_subnet }} | grep 'dns_nameservers' | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}" | head -n 1
  register: icic_subnet_dns
  failed_when:
    - icic_subnet_dns.stdout == ""
    - vm_type == "kvm"
    - physical_network != "macvtap0"

- name: Check subnet DNS is required for KVM, z/VM is optional
  ansible.builtin.fail:
    msg: "The specified os_dns_domain={{ os_dns_domain }} does not match on network: {{ use_network_name }} with subnet: {{ use_network_subnet }}"
  failed_when:
    - vm_type == "kvm"
    - icic_subnet_dns.stdout != os_dns_domain
    - physical_network != "macvtap0"

- name: Get nova api url
  ansible.builtin.shell: openstack catalog show -f json nova | jq -r '.endpoints[] | "\(.url)"' | head -n 1
  register: nova_url
  failed_when: nova_url.stdout == ""

- name: Get storage provider url
  ansible.builtin.shell: openstack catalog show -f json cinder | jq -r '.endpoints[] | "\(.url)"' | head -n 1
  register: storage_provider_url
  failed_when: storage_provider_url.stdout == ""

- name: Check icic resource requirements
  ansible.builtin.script: tools/check-icic-resources.py {{ nova_url.stdout_lines[0] }} {{ storage_provider_url.stdout_lines[0] }} {{ icic_token.stdout_lines[0] }} {{ os_compute_nodes_number }}
  args:
    executable: python3

- name: Get security group
  ansible.builtin.shell: openstack --os-volume-api-version=3 quota show -f json | grep "secgroups" | awk -F ':' '{print$2}' | tr -d ','
  register:
    security_group
  failed_when: security_group.stdout == ""

- name: Check security group
  ansible.builtin.fail:
    msg: "Security group number is not enough, current: {{ security_group.stdout_lines[0] }}, minimum required: 3"
  failed_when: "security_group.stdout_lines[0]|int < 3"

- name: Get security group rule
  ansible.builtin.shell: openstack --os-volume-api-version=3 quota show -f json | grep "secgroup-rules" | awk -F ':' '{print$2}' | tr -d ','
  register:
    security_group_rule
  failed_when: security_group_rule.stdout == ""

- name: Check security group rule
  ansible.builtin.fail:
    msg: "Security group rules number is not enough, current: {{ security_group_rule.stdout_lines[0] }}, required: 60"
  failed_when: "security_group_rule.stdout_lines[0]|int < 60"

- name: Get server group quota
  ansible.builtin.shell: openstack --os-volume-api-version=3 quota show -c server-groups -f value
  register:
    server_group
  failed_when: server_group.stdout == ""

- name: Check server group quota
  ansible.builtin.fail:
    msg: "Server group number is not enough, current: {{ server_group.stdout_lines[0] }}, required: 1"
  failed_when: "server_group.stdout_lines[0]|int < 1"

- name: Get storage provider
  ansible.builtin.shell: openstack --os-volume-api-version=3 volume service list -f csv | grep cinder-volume | wc -l
  register: storage_backend
  when:
    - volume_type_id is defined
    - disk_type == "scsi"

- name: Get storage template
  ansible.builtin.shell: openstack --os-volume-api-version=3 volume type list -c ID -f value | grep {{ volume_type_id }} | wc -l
  register: storage_template
  when:
    - volume_type_id is defined
    - disk_type == "scsi"

- name: Check if storage provider is configured
  ansible.builtin.fail:
    msg: "Storage provider is not enabled and active."
  failed_when: volume_type_id is defined and storage_backend.stdout |int < 1

- name: Check storage template
  ansible.builtin.fail:
    msg: "Storage template is not configured correctly."
  failed_when: volume_type_id is defined and storage_template.stdout |int < 1
