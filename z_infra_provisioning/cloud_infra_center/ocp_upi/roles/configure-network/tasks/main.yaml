# =================================================================
# Copyright 2021 https://github.com/openshift/installer
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =================================================================

# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================
#
# Change Summary: 
# - Add port creation
# - Delete unnecessary Ansible tasks
# - Use random strings to name compute ports

# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk

- name: 'Import common yaml'
  import_tasks: common.yaml

- name: 'Get the subnet range'
  command:
    cmd: "openstack subnet show {{ use_network_subnet }} -c cidr -f value"
  register: sunbet_range

- local_action:
    module: copy
    content: "{{ sunbet_range.stdout_lines[0]}}"
    dest: ".subnet_range.yml"

- name: 'Save some basic info into yaml'
  shell: |
    rm -rf .new_ocp_node.yml
    echo total_count={{ os_control_nodes_number | int }} >> .new_ocp_node.yml

- name: 'Check netowrk name is properly set'
  fail:
    msg: "use_network_name is not defined!"
  failed_when: use_network_name is not defined

- name: 'Check network subnet is properly set'
  fail:
    msg: "use_network_subnet is not defined!"
  failed_when: use_network_subnet is not defined

- name: "Get first start of allocation pool of subnet {{ use_network_subnet }}"
  shell: |
     openstack subnet show {{ use_network_subnet }} -c allocation_pools -f json | grep start | awk -F ':' '{print$2}'|tr -d '",'
  register: default_allocation_pool_start

- name: "Get first end of allocation pool of subnet {{ use_network_subnet }}"
  shell: |
     openstack subnet show {{ use_network_subnet }} -c allocation_pools -f json | grep end | awk -F ':' '{print$2}'|tr -d '",'
  register: default_allocation_pool_end

- name: "Remove all DNS nameserver of subnet {{ use_network_subnet }}"
  command:
    cmd: "openstack subnet set --no-dns-nameservers {{ use_network_subnet }} "

- name: 'Update new DNS nameserver and allocation pool of subnet {{ use_network_subnet }}'
  command:
    cmd: "openstack subnet set --dns-nameserver {{ os_dns_domain }} --allocation-pool start={{ allocation_pool_start }},end={{ allocation_pool_end }} {{ use_network_subnet }}"
  when:
  - allocation_pool_start is defined
  - allocation_pool_end is defined 

- name: 'Update new DNS nameserver of subnet {{ use_network_subnet }}'
  command:
    cmd: "openstack subnet set --dns-nameserver {{ os_dns_domain }} {{ use_network_subnet }}"
  when:
  - allocation_pool_start is not defined
  - allocation_pool_end is not defined 

- name: 'Update new DNS nameserver and partial allocation pool of subnet {{ use_network_subnet }}'
  command:
    cmd: "openstack subnet set --dns-nameserver {{ os_dns_domain }} --allocation-pool start={{ allocation_pool_start | default(sunbet_range.stdout_lines[0] | next_nth_usable(10)) }},end={{ allocation_pool_end | default(os_subnet_range | ipaddr('last_usable')) }} {{ use_network_subnet }}"
  when: (allocation_pool_start is not defined and allocation_pool_end is defined) or
        (allocation_pool_start is defined and allocation_pool_end is not defined)

- name: 'Export infra ID'
  shell:
    cmd: "jq -r .infraID metadata.json"
  register: infra_id

- name: 'Generate random string for the compute server ports and store them in a json file'
  script: tools/generate-random-compute-json.py {{ infra_id.stdout_lines[0] }} {{ os_compute_nodes_number }}
  args:
    executable: python3

- name: 'Create the bootstrap server port'
  os_port:
    name: "{{ os_port_bootstrap }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
    fixed_ips:
    #- subnet: "{{ os_subnet }}"
    - subnet_id: "{{ use_network_subnet }}"
      ip_address: "{{ os_bootstrap_ip }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the control server ports'
  os_port:
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
    fixed_ips:
    # subnet: "{{ os_subnet }}"
    - subnet_id: "{{ use_network_subnet }}"
      ip_address: "{{ os_master_ip[item.0] }}"
  with_indexed_items: "{{ [os_port_master] * os_control_nodes_number }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the compute server ports'
  os_port:
    name: "{{ item.1  }}-{{ item.0 }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_worker }}"
    fixed_ips:
    # subnet: "{{ os_subnet }}"
    - subnet_id: "{{ use_network_subnet }}"
      ip_address: "{{ os_infra_ip[item.0]}}"
  with_indexed_items:  "{{ [os_port_worker] * os_compute_nodes_number }}"
  when:
  - auto_allocated_ip == false

- name: 'Create the bootstrap server port'
  os_port:
    name: "{{ os_port_bootstrap }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
  when:
  - auto_allocated_ip == true


- name: 'Create the control server ports'
  os_port:
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_master }}"
  with_indexed_items: "{{ [os_port_master] * os_control_nodes_number }}"
  when:
  - auto_allocated_ip == true

- name: 'Create the compute server ports'
  os_port:
    name: "{{ item.1 }}-{{ item.0 }}"
    network: "{{ use_network_name }}"
    security_groups:
    - "{{ os_sg_worker }}"
  with_indexed_items: "{{ [os_port_worker] * os_compute_nodes_number }}"
  when:
  - auto_allocated_ip == true
    
- name: 'Set bootstrap port tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ os_port_bootstrap }}"

- name: 'Set control server ports tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item.1 }}-{{ item.0 }}"
  with_indexed_items: "{{ [os_port_master] * os_control_nodes_number }}"

- name: 'Set compute server ports tag'
  command:
    cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item.1 }}-{{ item.0 }}"
  with_indexed_items: "{{ [os_port_worker] * os_compute_nodes_number }}"